{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1471158586297},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1471158586299},{"_id":"themes/next/_config.yml","hash":"49544d6e104c7334e278db47f94148617c02b00e","modified":1471158586303},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1471158586321},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1471158586325},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1471158586595},{"_id":"source/_posts/Backbone-view.md","hash":"b333a14f074672328be0a61ea38c922cf2d4bb5d","modified":1471163530544},{"_id":"source/_posts/Model.md","hash":"4317ee2df93ba2eb2bc61198e634d966c8ce823f","modified":1471158598062},{"_id":"source/_posts/NSArray和NSMutableArray.md","hash":"6d2afc687230694d65254c96addaf598aec2acaa","modified":1471158585746},{"_id":"source/_posts/NSDictionary和NSMutableDictionary.md","hash":"e49b489f50158cef2f5e134f8b853fdf905ed923","modified":1471158585749},{"_id":"source/_posts/NSNumber.md","hash":"3fc01567c9127e272331e6d8e0288ac0667e716a","modified":1471158585751},{"_id":"source/_posts/NSSet和NSMutableSet.md","hash":"82c2d88a2df44b835955ff22947e0712003c64c4","modified":1471158585754},{"_id":"source/_posts/NSString.md","hash":"44117bfc560bb4f4c5d72b7773e50f742962abae","modified":1471158585757},{"_id":"source/_posts/break-continue.md","hash":"e4f9b657de98865d3f0e4c088eaf1a05d9d56727","modified":1471158585759},{"_id":"source/_posts/eslint-配置.md","hash":"9652d8237aea3cd61728d552f83713bd95a5c874","modified":1471158585781},{"_id":"source/_posts/hello-world.md","hash":"5e42641f327399d342e0de230fb898a65c9a2e5b","modified":1471158585784},{"_id":"source/_posts/swift-Array.md","hash":"bac0dd7608bfa90d2a32ce64866b02ae3f212f31","modified":1471158585787},{"_id":"source/_posts/swift-Dictionary-字典.md","hash":"fd03ff20ac47e5c2a847da031de168ec755a1f9d","modified":1471158585792},{"_id":"source/_posts/swift-Tuples-元祖-类型.md","hash":"cd1ec0744dd7c42e06b105d72b541d4ab163c9ba","modified":1471158585816},{"_id":"source/_posts/swift-Optionals-可选值.md","hash":"5f1a9c9de64f0ea8b77573a68df51593832c7358","modified":1471158585810},{"_id":"source/_posts/swift-UILabel.md","hash":"5c9871adcf4d39964c5f52ce1df526ce66fb96c0","modified":1471158585820},{"_id":"source/_posts/swift-二维数组.md","hash":"5680e397da9f865d3940b6519467b25c70a3de33","modified":1471158585825},{"_id":"source/_posts/swift-动画.md","hash":"ee1d85b359163b996b72f8a20977eb56dd5523bd","modified":1471158585828},{"_id":"source/_posts/swift-枚举类型.md","hash":"a48e934e365e7b38ad1ceba36e2b730bcfe82670","modified":1471158585831},{"_id":"source/_posts/swift-模糊效果.md","hash":"e80f12cb5f3aa014992b4ab2d3121e8a3ea63155","modified":1471158585833},{"_id":"source/_posts/swift-类.md","hash":"23f40e7b5192d70e1d9dd1cd9bd97b3e1a608598","modified":1471158585836},{"_id":"source/_posts/swift-结构体.md","hash":"34b0d27b2d466116c3adee0eb2be2cc251576883","modified":1471158585840},{"_id":"source/_posts/可选值-可选类型.md","hash":"4ae855ba85006497688c710ff181733088d57ac8","modified":1471158585842},{"_id":"source/_posts/新的开始.md","hash":"f3e606b2a6313733a4940ab315d222d6e8d4c249","modified":1471158585844},{"_id":"source/categories/index.md","hash":"a9983b8f88d92a1f6e659cf161f17a176b62c909","modified":1471158585847},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1471158586328},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1471158586330},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1471158586342},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1471158586344},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1471158586346},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1471158586349},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1471158586352},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1471158586357},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1471158586360},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1471158586362},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1471158586365},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1471158586368},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1471158586372},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1471158586580},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1471158586578},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1471158586582},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1471158586585},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1471158586589},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1471158586593},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1471158586599},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1471158587709},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1471158587717},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1471158587729},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158587177},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1471158586374},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1471158586379},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1471158586382},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8aa5212d803670179222dbc80e73eadd7328d8e5","modified":1471158586385},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1471158586390},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1471158586393},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1471158586395},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1471158586398},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1471158586404},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1471158586409},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1471158586411},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1471158586413},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1471158586468},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1471158586470},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1471158586472},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1471158586573},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1471158586602},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1471158586605},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1471158586612},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1471158587177},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471158587178},{"_id":"themes/next/source/images/avatar.jpg","hash":"0305c97164631f8b49bc4a90df1390cd8d96c024","modified":1471158587183},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1471158587189},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1471158587196},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1471158587202},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1471158587206},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1471158587211},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1471158587234},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1471158587216},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471158587237},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471158587238},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1471158587245},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471158587246},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1471158587242},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158586475},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158586476},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158587045},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158587055},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158587045},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158587164},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471158587173},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1471158586407},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1471158586415},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1471158586420},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1471158586423},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1471158586458},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1471158586425},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1471158586461},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1471158586466},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1471158586475},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1471158586478},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1471158586480},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1471158586515},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1471158586537},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1471158586545},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1471158586551},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1471158586568},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1471158587045},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1471158587049},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1471158587054},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1471158587164},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1471158587167},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1471158587173},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1471158587274},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1471158587284},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1471158587290},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1471158587302},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1471158587312},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1471158587328},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1471158587337},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1471158587340},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1471158587343},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1471158587417},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1471158587421},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1471158587427},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1471158587430},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1471158587462},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1471158587465},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1471158587468},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1471158587470},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1471158587472},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1471158587546},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1471158587578},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1471158587582},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1471158587585},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1471158587588},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1471158587597},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1471158587625},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1471158587647},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1471158587649},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1471158587692},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1471158587699},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1471158587706},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1471158587575},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1471158586485},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1471158586489},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"3931f9c3bac3970a3f54c9d0072ae4c950aa176c","modified":1471158586492},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1471158586502},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1471158586497},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1471158586512},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1471158586520},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1471158586526},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1471158586615},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1471158586618},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1471158586620},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1471158586625},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1471158586660},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1471158586955},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1471158587026},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1471158587030},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1471158587034},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1471158587038},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1471158587042},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1471158587059},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1471158587063},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1471158587068},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1471158587073},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1471158587077},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1471158587080},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1471158587084},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1471158587097},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1471158587114},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1471158587120},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1471158587124},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1471158587129},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1471158587134},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1471158587137},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1471158587145},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1471158587141},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1471158587148},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1471158587157},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1471158587160},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1471158587022},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1471158587316},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471158587344},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471158587345},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471158587344},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471158587346},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471158587346},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471158587347},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1471158587391},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1471158587402},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1471158587413},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471158587460},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1471158587438},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1471158587475},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1471158587495},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1471158587500},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471158587543},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1471158587636},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1471158587644},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471158587506},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471158587520},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471158587539},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1471158587678},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1471158586628},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1471158586630},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1471158586633},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1471158586635},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1471158586638},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1471158586640},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1471158586643},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1471158586645},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1471158586647},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1471158586650},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1471158586653},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1471158586658},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1471158586664},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1471158586667},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1471158586672},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1471158586701},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1471158586726},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1471158586749},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1471158586783},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1471158586787},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1471158586793},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1471158586798},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1471158586866},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1471158586873},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1471158586892},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1471158586907},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1471158586912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1471158586924},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1471158586936},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1471158586939},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1471158586943},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1471158586947},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1471158586951},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1471158586963},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1471158586968},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1471158586971},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1471158586974},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1471158586999},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1471158587003},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1471158587007},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1471158587009},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1471158587014},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1471158587017},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1471158587093},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1471158587090},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1471158587129},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471158587348},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1471158587348},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1471158587370},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1471158587376},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1471158587377},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1471158587386},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471158587535},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1471158587531},{"_id":"public/categories/index.html","hash":"bb0cf330de2337a3d6df1dec3b9880c43c2d6816","modified":1471163580361},{"_id":"public/2016/08/14/hello-world/index.html","hash":"65125066bab69517ba27ba6128611db2de1ae4ca","modified":1471163580361},{"_id":"public/2016/08/14/NSSet和NSMutableSet/index.html","hash":"f93e074715860f924d3b62a19fbf5fea2cce1960","modified":1471163580362},{"_id":"public/2016/08/14/NSNumber/index.html","hash":"d11cd1f863e568b65a44b45cb45c3d70a6aa3ce9","modified":1471163580362},{"_id":"public/2016/08/14/NSDictionary和NSMutableDictionary/index.html","hash":"016e9a19a167a96c9bf97cefeb39544120bece3d","modified":1471163580362},{"_id":"public/2016/08/14/NSArray和NSMutableArray/index.html","hash":"d7a7ebb3ed99e3132fe2eb24e1a0771d0fc6d0a3","modified":1471163580362},{"_id":"public/2015/09/24/swift-二维数组/index.html","hash":"b054de252edb8309a548c7b5b46d9b5ff7e54541","modified":1471163580362},{"_id":"public/2015/09/21/swift-模糊效果/index.html","hash":"1e66df5876cf47527ab951d4f6695c647044736c","modified":1471163580362},{"_id":"public/2015/09/21/swift-动画/index.html","hash":"8371e0f0758b58f9b62884d46ec972e0c67890fe","modified":1471163580362},{"_id":"public/2015/09/09/swift-类/index.html","hash":"54478f206eda72f820021a6bac41a971fffeb03e","modified":1471163580362},{"_id":"public/2015/09/08/swift-结构体/index.html","hash":"3232a1d78a52c2aa111492de934a3b4f0dbe1584","modified":1471163580362},{"_id":"public/2015/09/08/swift-枚举类型/index.html","hash":"eefcba4ae5ac05c03b8d324711a97961545974fe","modified":1471163580362},{"_id":"public/2015/09/02/break-continue/index.html","hash":"0412f86c4f791e34e3fe91bd5d4222a5e8c52890","modified":1471163580362},{"_id":"public/2015/09/02/swift-Dictionary-字典/index.html","hash":"4b890701e3e40e1da350083b7844dc088056c7f2","modified":1471163580362},{"_id":"public/2015/09/01/swift-Array/index.html","hash":"def019da184768813ba8ecf1abd187c95369ada1","modified":1471163580363},{"_id":"public/2015/09/01/可选值-可选类型/index.html","hash":"57613826a13a4143623fcb79da83072b2cfc5d18","modified":1471163580363},{"_id":"public/2015/08/11/swift-UILabel/index.html","hash":"69f96122f172f3c5b610a4f78010c65b155c8cfc","modified":1471163580363},{"_id":"public/2015/06/18/swift-Optionals-可选值/index.html","hash":"b9d80223e445ac7e6e045279688318d76a2552f4","modified":1471163580364},{"_id":"public/2015/06/18/swift-Tuples-元祖-类型/index.html","hash":"bffc3ff9ab9ea2b5db7a5c80a248319088c56abd","modified":1471163580364},{"_id":"public/2015/04/08/新的开始/index.html","hash":"49d3243355b71b86de3f6f222ec8cb66ebae6dd5","modified":1471163580364},{"_id":"public/archives/index.html","hash":"3bf25980e37997d21bf3ce1b90d87549f637e899","modified":1471163580364},{"_id":"public/archives/page/2/index.html","hash":"7c6d8bb7497d467cf766505d3128a31f7a35b0a2","modified":1471163580364},{"_id":"public/archives/page/3/index.html","hash":"9ff201504214d97056a71cf7ac90f3dfec9bde1c","modified":1471163580364},{"_id":"public/archives/2015/index.html","hash":"552eabf3573272ad634735296ea50a385f2c3fe3","modified":1471163580364},{"_id":"public/archives/2015/page/2/index.html","hash":"878e2d419c5f0bbd9ad54b64f7cb0243936a2edc","modified":1471163580364},{"_id":"public/archives/2015/04/index.html","hash":"ec78a2f285ee35e3fe789bb3db0f3144a313db0d","modified":1471163580364},{"_id":"public/archives/2015/06/index.html","hash":"81d83d8baea4c584906165159e9f31f4a803953f","modified":1471163580364},{"_id":"public/archives/2015/08/index.html","hash":"1e11ed5d41c3c3f6251f5ca34a7360cc617ac4a8","modified":1471163580364},{"_id":"public/archives/2015/09/index.html","hash":"98829ed11e3d6bc52181ef2496caded64d10a007","modified":1471163580364},{"_id":"public/archives/2016/index.html","hash":"610a73ba821af5ac4d4d6514e1faff2e300924cb","modified":1471163580364},{"_id":"public/archives/2016/07/index.html","hash":"1e399f8a02c2bd70451f37fcef201572b6b0a121","modified":1471163580364},{"_id":"public/archives/2016/08/index.html","hash":"2476823444e555dfcdf9bc201f21e2325bfec22c","modified":1471163580364},{"_id":"public/categories/javascript/index.html","hash":"082008b9d8729083964e116b4e2c9e11847aca2a","modified":1471163580365},{"_id":"public/categories/swift/index.html","hash":"2a61dce66878aadc40a9fdde2f146afa966e364b","modified":1471163580365},{"_id":"public/categories/swift/page/2/index.html","hash":"5cb40751fe5acfb1b4dc7c5bd15235c13713f0e6","modified":1471163580365},{"_id":"public/categories/日志/index.html","hash":"4557a8bc87a419aa2289bcaf3436f8928b50530f","modified":1471163580365},{"_id":"public/tags/backbone/index.html","hash":"b2eec1bdcffa9600e9a9f22df2515dbd871cdd72","modified":1471163580365},{"_id":"public/tags/swift-break-continue/index.html","hash":"a9db62c3d4b5f9680b08e8c40a1bc9851b128abf","modified":1471163580365},{"_id":"public/tags/eslint/index.html","hash":"845612fb7b4c5651a71d0d4570a22048c58f57c8","modified":1471163580365},{"_id":"public/tags/swift-Array/index.html","hash":"1c3839d96f1aaf0b6c309278520ab3816bf409d4","modified":1471163580365},{"_id":"public/tags/swift-字典/index.html","hash":"12854b7a120e7b10161e0245821059eb1e3fbb37","modified":1471163580365},{"_id":"public/tags/UILabel/index.html","hash":"dbe7092a27ef05565477275e1b5676a09c190a6b","modified":1471163580365},{"_id":"public/tags/元祖类型/index.html","hash":"a1eaf7866efa08a3c93d3ba1a563875877f5f43d","modified":1471163580365},{"_id":"public/tags/可选值/index.html","hash":"49ef39c2a215aaf5776ba5171384106760f8122e","modified":1471163580365},{"_id":"public/tags/二维数组/index.html","hash":"83498125632b5437edf7f9644cc6ad129f92e989","modified":1471163580365},{"_id":"public/tags/动画/index.html","hash":"954c97089a949d78c532105a17748040b4696b36","modified":1471163580365},{"_id":"public/tags/枚举-enum/index.html","hash":"fde160f9996b7afc79d72ac653b0bd1867e83020","modified":1471163580365},{"_id":"public/tags/模糊效果/index.html","hash":"38194a186537d3e58110c03329ec58cb1f26a548","modified":1471163580365},{"_id":"public/tags/类/index.html","hash":"a123b8c205cba28cc99ff3b5fba891b867fed822","modified":1471163580365},{"_id":"public/tags/结构体/index.html","hash":"a3fa8a2a274d21d93f90730687bd6e2fc5fcae42","modified":1471163580365},{"_id":"public/page/3/index.html","hash":"7444e2915852c2898fefa3a2028860266d140a4a","modified":1471163580365},{"_id":"public/2016/08/14/Backbone-view/index.html","hash":"8cfbbcb9f462a77a1cefa907a97d8a53ad73b495","modified":1471163580365},{"_id":"public/2016/08/14/NSString/index.html","hash":"950cec6ae80b9f7ca2aaf9b26e6f164cf973dca9","modified":1471163580365},{"_id":"public/2016/08/14/Model/index.html","hash":"0da467178aad81246ffeecfd539f373c1e6bf902","modified":1471163580365},{"_id":"public/2016/07/31/eslint-配置/index.html","hash":"4f90dd89f8469acec425ecb3cd0fc89d31406c85","modified":1471163580365},{"_id":"public/index.html","hash":"73711646a3695b501ff2cbfde87b0914e03dc04c","modified":1471163580365},{"_id":"public/page/2/index.html","hash":"047d3c5de2a3f68b4abfc956152e7caa2692a6b2","modified":1471163580366},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471163580384},{"_id":"public/images/avatar.jpg","hash":"0305c97164631f8b49bc4a90df1390cd8d96c024","modified":1471163580384},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1471163580384},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1471163580384},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1471163580384},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1471163580384},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1471163580384},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1471163580384},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1471163580384},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471163580384},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1471163580384},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471163580384},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471163580385},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1471163580385},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1471163580385},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1471163580385},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471163580385},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471163580385},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471163580385},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471163580385},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471163580385},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471163580386},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1471163580386},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471163580386},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471163580386},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471163580975},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471163580979},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471163580980},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471163580985},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471163580985},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471163580985},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471163580985},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471163580985},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471163580985},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471163580985},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1471163580985},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1471163580985},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1471163580985},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1471163580985},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1471163580985},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1471163580985},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471163580985},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1471163580985},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471163580985},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471163580985},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471163580985},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471163580985},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471163580986},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471163580986},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471163580986},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471163580986},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471163580986},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471163580986},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471163580986},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471163580986},{"_id":"public/css/main.css","hash":"5ab6b6a1c98757755b61e7fd7bd9180c3c93e3b9","modified":1471163580986},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471163580986},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471163580986},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471163580986},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471163580986},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471163580986},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471163580986},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471163580986},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471163580986},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1471163580986},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471163580986},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1471163580999}],"Category":[{"name":"javascript","_id":"ciruct5tb000418twbgvgo0h0"},{"name":"swift","_id":"ciruct5tg000918twlefve6jr"},{"name":"日志","_id":"ciruct5ut001r18twwisjlsyb"}],"Data":[],"Page":[{"title":"标签","date":"2016-07-24T04:42:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2016-07-24 12:42:10\ntype: \"categories\"\n---\n","updated":"2016-08-14T07:09:45.847Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciruct5t2000118twgtahl184","content":"","excerpt":"","more":""}],"Post":[{"title":"Backbone View","date":"2016-08-14T07:23:04.000Z","_content":"#### 初始化一个View\n这里结合model来初始化一个view\n\n    var student1 = {\n        name: 'xiaoming',\n        age: 12\n    }\n    var Model = Backbone.Model.extend()\n    var studentModel = new Model(student1)\n\n    // 创建一个View对象\n    var View = Backbone.View.extend()\n\n    // 生成一个View实例\n    var studentView1 = new View({\n        model: student1\n    })\n\n#### 把View写入页面中\n重新修改View对象\n\n    // 创建一个View对象\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n            this.render().$el.appendTo('body')\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })\n\n    // 生成一个View实例\n    new View({\n        model: studentModel\n    })\n\n#### 绑定事件，当model改变时重新渲染DOM\n修改View对象，在initialize里用listenTo绑定事件\n\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n            this.render().$el.appendTo('body')\n\n            // 监听model\n            this.listenTo(this.model, 'change', this.render)\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })\n\n    // 修改model\n    studentModel.set('name', 'zhangsan')\n\n#### 给view添加各种事件\n修改View对象，在events里添加各种事件\n\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n\n            this.render().$el.appendTo('body')\n            this.listenTo(this.model, 'change', this.render)\n        },\n\n        // 这里给view绑定各种事件\n        events: {\n            // 事件名 选择器: 事件字符串\n            'click span': 'handleSpanClick',\n            'mouseenter': 'handleHover'\n        },\n\n        // 绑定的事件\n        handleSpanClick: function(ev){\n            console.log(ev)\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })\n\n#### 修改View先修改Model\n\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n            this.render().$el.appendTo('body')\n            this.listenTo(this.model, 'change', this.render)\n\n            // 用backbone内置方法remove删除view\n            this.listenTo(this.model, 'destroy', this.remove)\n        },\n        events: {\n            'click span': 'handleSpanClick'\n        },\n        handleSpanClick: function(){\n\n            // 用backbone内置方法destroy删除model\n            this.model.destroy()\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })","source":"_posts/Backbone-view.md","raw":"---\ntitle: Backbone View\ndate: 2016-08-14 15:23:04\ntags: backbone\ncategories: javascript\n---\n#### 初始化一个View\n这里结合model来初始化一个view\n\n    var student1 = {\n        name: 'xiaoming',\n        age: 12\n    }\n    var Model = Backbone.Model.extend()\n    var studentModel = new Model(student1)\n\n    // 创建一个View对象\n    var View = Backbone.View.extend()\n\n    // 生成一个View实例\n    var studentView1 = new View({\n        model: student1\n    })\n\n#### 把View写入页面中\n重新修改View对象\n\n    // 创建一个View对象\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n            this.render().$el.appendTo('body')\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })\n\n    // 生成一个View实例\n    new View({\n        model: studentModel\n    })\n\n#### 绑定事件，当model改变时重新渲染DOM\n修改View对象，在initialize里用listenTo绑定事件\n\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n            this.render().$el.appendTo('body')\n\n            // 监听model\n            this.listenTo(this.model, 'change', this.render)\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })\n\n    // 修改model\n    studentModel.set('name', 'zhangsan')\n\n#### 给view添加各种事件\n修改View对象，在events里添加各种事件\n\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n\n            this.render().$el.appendTo('body')\n            this.listenTo(this.model, 'change', this.render)\n        },\n\n        // 这里给view绑定各种事件\n        events: {\n            // 事件名 选择器: 事件字符串\n            'click span': 'handleSpanClick',\n            'mouseenter': 'handleHover'\n        },\n\n        // 绑定的事件\n        handleSpanClick: function(ev){\n            console.log(ev)\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })\n\n#### 修改View先修改Model\n\n    var View = Backbone.View.extend({\n        tagName: 'p',\n        className: 'item-name',\n        initialize: function(){\n            this.render().$el.appendTo('body')\n            this.listenTo(this.model, 'change', this.render)\n\n            // 用backbone内置方法remove删除view\n            this.listenTo(this.model, 'destroy', this.remove)\n        },\n        events: {\n            'click span': 'handleSpanClick'\n        },\n        handleSpanClick: function(){\n\n            // 用backbone内置方法destroy删除model\n            this.model.destroy()\n        },\n        render: function(){\n            var json = this.model.toJSON();\n            this.$el.html('<h3>' + json.name + '</h3><span>'+ json.age +'</span>')\n            return this\n        }\n    })","slug":"Backbone-view","published":1,"updated":"2016-08-14T08:32:10.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5sx000018twygqjr8ik","content":"<h4 id=\"初始化一个View\"><a href=\"#初始化一个View\" class=\"headerlink\" title=\"初始化一个View\"></a>初始化一个View</h4><p>这里结合model来初始化一个view</p>\n<pre><code>var student1 = {\n    name: &apos;xiaoming&apos;,\n    age: 12\n}\nvar Model = Backbone.Model.extend()\nvar studentModel = new Model(student1)\n\n// 创建一个View对象\nvar View = Backbone.View.extend()\n\n// 生成一个View实例\nvar studentView1 = new View({\n    model: student1\n})\n</code></pre><h4 id=\"把View写入页面中\"><a href=\"#把View写入页面中\" class=\"headerlink\" title=\"把View写入页面中\"></a>把View写入页面中</h4><p>重新修改View对象</p>\n<pre><code>// 创建一个View对象\nvar View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n        this.render().$el.appendTo(&apos;body&apos;)\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n\n// 生成一个View实例\nnew View({\n    model: studentModel\n})\n</code></pre><h4 id=\"绑定事件，当model改变时重新渲染DOM\"><a href=\"#绑定事件，当model改变时重新渲染DOM\" class=\"headerlink\" title=\"绑定事件，当model改变时重新渲染DOM\"></a>绑定事件，当model改变时重新渲染DOM</h4><p>修改View对象，在initialize里用listenTo绑定事件</p>\n<pre><code>var View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n        this.render().$el.appendTo(&apos;body&apos;)\n\n        // 监听model\n        this.listenTo(this.model, &apos;change&apos;, this.render)\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n\n// 修改model\nstudentModel.set(&apos;name&apos;, &apos;zhangsan&apos;)\n</code></pre><h4 id=\"给view添加各种事件\"><a href=\"#给view添加各种事件\" class=\"headerlink\" title=\"给view添加各种事件\"></a>给view添加各种事件</h4><p>修改View对象，在events里添加各种事件</p>\n<pre><code>var View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n\n        this.render().$el.appendTo(&apos;body&apos;)\n        this.listenTo(this.model, &apos;change&apos;, this.render)\n    },\n\n    // 这里给view绑定各种事件\n    events: {\n        // 事件名 选择器: 事件字符串\n        &apos;click span&apos;: &apos;handleSpanClick&apos;,\n        &apos;mouseenter&apos;: &apos;handleHover&apos;\n    },\n\n    // 绑定的事件\n    handleSpanClick: function(ev){\n        console.log(ev)\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n</code></pre><h4 id=\"修改View先修改Model\"><a href=\"#修改View先修改Model\" class=\"headerlink\" title=\"修改View先修改Model\"></a>修改View先修改Model</h4><pre><code>var View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n        this.render().$el.appendTo(&apos;body&apos;)\n        this.listenTo(this.model, &apos;change&apos;, this.render)\n\n        // 用backbone内置方法remove删除view\n        this.listenTo(this.model, &apos;destroy&apos;, this.remove)\n    },\n    events: {\n        &apos;click span&apos;: &apos;handleSpanClick&apos;\n    },\n    handleSpanClick: function(){\n\n        // 用backbone内置方法destroy删除model\n        this.model.destroy()\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n</code></pre>","excerpt":"","more":"<h4 id=\"初始化一个View\"><a href=\"#初始化一个View\" class=\"headerlink\" title=\"初始化一个View\"></a>初始化一个View</h4><p>这里结合model来初始化一个view</p>\n<pre><code>var student1 = {\n    name: &apos;xiaoming&apos;,\n    age: 12\n}\nvar Model = Backbone.Model.extend()\nvar studentModel = new Model(student1)\n\n// 创建一个View对象\nvar View = Backbone.View.extend()\n\n// 生成一个View实例\nvar studentView1 = new View({\n    model: student1\n})\n</code></pre><h4 id=\"把View写入页面中\"><a href=\"#把View写入页面中\" class=\"headerlink\" title=\"把View写入页面中\"></a>把View写入页面中</h4><p>重新修改View对象</p>\n<pre><code>// 创建一个View对象\nvar View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n        this.render().$el.appendTo(&apos;body&apos;)\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n\n// 生成一个View实例\nnew View({\n    model: studentModel\n})\n</code></pre><h4 id=\"绑定事件，当model改变时重新渲染DOM\"><a href=\"#绑定事件，当model改变时重新渲染DOM\" class=\"headerlink\" title=\"绑定事件，当model改变时重新渲染DOM\"></a>绑定事件，当model改变时重新渲染DOM</h4><p>修改View对象，在initialize里用listenTo绑定事件</p>\n<pre><code>var View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n        this.render().$el.appendTo(&apos;body&apos;)\n\n        // 监听model\n        this.listenTo(this.model, &apos;change&apos;, this.render)\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n\n// 修改model\nstudentModel.set(&apos;name&apos;, &apos;zhangsan&apos;)\n</code></pre><h4 id=\"给view添加各种事件\"><a href=\"#给view添加各种事件\" class=\"headerlink\" title=\"给view添加各种事件\"></a>给view添加各种事件</h4><p>修改View对象，在events里添加各种事件</p>\n<pre><code>var View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n\n        this.render().$el.appendTo(&apos;body&apos;)\n        this.listenTo(this.model, &apos;change&apos;, this.render)\n    },\n\n    // 这里给view绑定各种事件\n    events: {\n        // 事件名 选择器: 事件字符串\n        &apos;click span&apos;: &apos;handleSpanClick&apos;,\n        &apos;mouseenter&apos;: &apos;handleHover&apos;\n    },\n\n    // 绑定的事件\n    handleSpanClick: function(ev){\n        console.log(ev)\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n</code></pre><h4 id=\"修改View先修改Model\"><a href=\"#修改View先修改Model\" class=\"headerlink\" title=\"修改View先修改Model\"></a>修改View先修改Model</h4><pre><code>var View = Backbone.View.extend({\n    tagName: &apos;p&apos;,\n    className: &apos;item-name&apos;,\n    initialize: function(){\n        this.render().$el.appendTo(&apos;body&apos;)\n        this.listenTo(this.model, &apos;change&apos;, this.render)\n\n        // 用backbone内置方法remove删除view\n        this.listenTo(this.model, &apos;destroy&apos;, this.remove)\n    },\n    events: {\n        &apos;click span&apos;: &apos;handleSpanClick&apos;\n    },\n    handleSpanClick: function(){\n\n        // 用backbone内置方法destroy删除model\n        this.model.destroy()\n    },\n    render: function(){\n        var json = this.model.toJSON();\n        this.$el.html(&apos;&lt;h3&gt;&apos; + json.name + &apos;&lt;/h3&gt;&lt;span&gt;&apos;+ json.age +&apos;&lt;/span&gt;&apos;)\n        return this\n    }\n})\n</code></pre>"},{"title":"NSArray和NSMutableArray","_content":"### NSArray的一些方法总结\n  \n    // 数组的创建\n    NSArray *array1 = [NSArray arrayWithObject:@\"one\"];\n    NSArray *array2 = [NSArray arrayWithObjects:@\"one\", @\"two\", @\"three\", @\"four\", @\"five\",nil];\n    NSArray *array3 = [NSArray arrayWithArray:array2];\n    NSLog(@\"array1 : %@\", array1);\n    NSLog(@\"array2 : %@\", array2);\n    NSLog(@\"array3 : %@\", array3);\n    NSArray *array4 = [[NSArray alloc] initWithArray:array1];\n    \n    // 获取数组中元素的个数\n    int count = [array2 count];\n    NSLog(@\"%d\", count);   // => 5\n    \n    NSString *string1 = [array2 objectAtIndex:1];\n    NSLog(@\"%@\", string1);  // => two\n    \n    // 追加对象,返回一个新的数组\n    NSArray *array5 = [array2 arrayByAddingObject:@\"six\"];\n    NSLog(@\"array5 : %@\", array5);\n    \n    // 用指定的字符串把数组中的元素连接起来\n    NSString *string2 = [array5 componentsJoinedByString:@\"|\"];\n    NSLog(@\"%@\", string2);\n    \n    // 判断数组中是否存在一个指定的对象\n    BOOL isContain = [array5 containsObject:@\"three\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 根据指定的对象返回索引下标\n    NSInteger index = [array5 indexOfObject:@\"three\"];\n    NSLog(@\"%d\", index);\n    \n    // 返回数组中的最后一个元素\n    NSString *lastObject = [array5 lastObject];\n    NSLog(@\"%@\", lastObject);\n\n\n### NSMutableArray的一些方法总结\n* NSMutableArray继承自NSArray\n\n\n    // 可变数组\n    NSMutableArray *mArray1 = [NSMutableArray array];\n    NSLog(@\"%@\", mArray1);\n    \n    // 创建一个有5个元素的可变数组\n    NSMutableArray *mArray2 = [NSMutableArray arrayWithCapacity:5];\n    NSLog(@\"%@\", mArray2);\n    \n    NSMutableArray *mArray3 = [NSMutableArray arrayWithObjects:@\"one\", @\"two\", nil];\n    NSLog(@\"%@\", mArray3);\n    \n    //添加元素\n    [mArray3 addObject:@\"three\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 插入元素\n    [mArray3 insertObject:@\"four\" atIndex:3];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除最后一个元素\n    [mArray3 removeLastObject];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除指定元素\n    [mArray3 removeObject:@\"two\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 根据索引下标删除\n    [mArray3 removeObjectAtIndex:1];\n    NSLog(@\"%@\", mArray3);\n    \n    [mArray3 addObject:@\"six\"];\n    [mArray3 addObject:@\"seven\"];\n    [mArray3 addObject:@\"eight\"];\n    \n    // 根据数组删除\n    NSArray *deleteArray = [NSArray arrayWithObjects:@\"seven\",@\"eight\",nil];\n    [mArray3 removeObjectsInArray:deleteArray];\n    NSLog(@\"%@\", mArray3);\n    \n    // 替换指定下标的元素\n    [mArray3 replaceObjectAtIndex:1 withObject:@\"replace\"];\n    NSLog(@\"%@\", mArray3);\n\n### 遍历数组\n    \n    for (NSString *tempString in array5) {\n      NSLog(@\"found: %@\", tempString);\n    }\n    \n    // 当不确定数组的元素的类型时,可以选择用id\n    for (id tempString in array5) {\n      NSLog(@\"id found: %@\", tempString);\n    }","source":"_posts/NSArray和NSMutableArray.md","raw":"title: \"NSArray和NSMutableArray\"\ncategories: swift\n---\n### NSArray的一些方法总结\n  \n    // 数组的创建\n    NSArray *array1 = [NSArray arrayWithObject:@\"one\"];\n    NSArray *array2 = [NSArray arrayWithObjects:@\"one\", @\"two\", @\"three\", @\"four\", @\"five\",nil];\n    NSArray *array3 = [NSArray arrayWithArray:array2];\n    NSLog(@\"array1 : %@\", array1);\n    NSLog(@\"array2 : %@\", array2);\n    NSLog(@\"array3 : %@\", array3);\n    NSArray *array4 = [[NSArray alloc] initWithArray:array1];\n    \n    // 获取数组中元素的个数\n    int count = [array2 count];\n    NSLog(@\"%d\", count);   // => 5\n    \n    NSString *string1 = [array2 objectAtIndex:1];\n    NSLog(@\"%@\", string1);  // => two\n    \n    // 追加对象,返回一个新的数组\n    NSArray *array5 = [array2 arrayByAddingObject:@\"six\"];\n    NSLog(@\"array5 : %@\", array5);\n    \n    // 用指定的字符串把数组中的元素连接起来\n    NSString *string2 = [array5 componentsJoinedByString:@\"|\"];\n    NSLog(@\"%@\", string2);\n    \n    // 判断数组中是否存在一个指定的对象\n    BOOL isContain = [array5 containsObject:@\"three\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 根据指定的对象返回索引下标\n    NSInteger index = [array5 indexOfObject:@\"three\"];\n    NSLog(@\"%d\", index);\n    \n    // 返回数组中的最后一个元素\n    NSString *lastObject = [array5 lastObject];\n    NSLog(@\"%@\", lastObject);\n\n\n### NSMutableArray的一些方法总结\n* NSMutableArray继承自NSArray\n\n\n    // 可变数组\n    NSMutableArray *mArray1 = [NSMutableArray array];\n    NSLog(@\"%@\", mArray1);\n    \n    // 创建一个有5个元素的可变数组\n    NSMutableArray *mArray2 = [NSMutableArray arrayWithCapacity:5];\n    NSLog(@\"%@\", mArray2);\n    \n    NSMutableArray *mArray3 = [NSMutableArray arrayWithObjects:@\"one\", @\"two\", nil];\n    NSLog(@\"%@\", mArray3);\n    \n    //添加元素\n    [mArray3 addObject:@\"three\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 插入元素\n    [mArray3 insertObject:@\"four\" atIndex:3];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除最后一个元素\n    [mArray3 removeLastObject];\n    NSLog(@\"%@\", mArray3);\n    \n    // 移除指定元素\n    [mArray3 removeObject:@\"two\"];\n    NSLog(@\"%@\", mArray3);\n    \n    // 根据索引下标删除\n    [mArray3 removeObjectAtIndex:1];\n    NSLog(@\"%@\", mArray3);\n    \n    [mArray3 addObject:@\"six\"];\n    [mArray3 addObject:@\"seven\"];\n    [mArray3 addObject:@\"eight\"];\n    \n    // 根据数组删除\n    NSArray *deleteArray = [NSArray arrayWithObjects:@\"seven\",@\"eight\",nil];\n    [mArray3 removeObjectsInArray:deleteArray];\n    NSLog(@\"%@\", mArray3);\n    \n    // 替换指定下标的元素\n    [mArray3 replaceObjectAtIndex:1 withObject:@\"replace\"];\n    NSLog(@\"%@\", mArray3);\n\n### 遍历数组\n    \n    for (NSString *tempString in array5) {\n      NSLog(@\"found: %@\", tempString);\n    }\n    \n    // 当不确定数组的元素的类型时,可以选择用id\n    for (id tempString in array5) {\n      NSLog(@\"id found: %@\", tempString);\n    }","slug":"NSArray和NSMutableArray","published":1,"date":"2016-08-14T07:09:45.744Z","updated":"2016-08-14T07:09:45.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5t4000218twbdvzgbxm","content":"<h3 id=\"NSArray的一些方法总结\"><a href=\"#NSArray的一些方法总结\" class=\"headerlink\" title=\"NSArray的一些方法总结\"></a>NSArray的一些方法总结</h3><pre><code>// 数组的创建\nNSArray *array1 = [NSArray arrayWithObject:@&quot;one&quot;];\nNSArray *array2 = [NSArray arrayWithObjects:@&quot;one&quot;, @&quot;two&quot;, @&quot;three&quot;, @&quot;four&quot;, @&quot;five&quot;,nil];\nNSArray *array3 = [NSArray arrayWithArray:array2];\nNSLog(@&quot;array1 : %@&quot;, array1);\nNSLog(@&quot;array2 : %@&quot;, array2);\nNSLog(@&quot;array3 : %@&quot;, array3);\nNSArray *array4 = [[NSArray alloc] initWithArray:array1];\n\n// 获取数组中元素的个数\nint count = [array2 count];\nNSLog(@&quot;%d&quot;, count);   // =&gt; 5\n\nNSString *string1 = [array2 objectAtIndex:1];\nNSLog(@&quot;%@&quot;, string1);  // =&gt; two\n\n// 追加对象,返回一个新的数组\nNSArray *array5 = [array2 arrayByAddingObject:@&quot;six&quot;];\nNSLog(@&quot;array5 : %@&quot;, array5);\n\n// 用指定的字符串把数组中的元素连接起来\nNSString *string2 = [array5 componentsJoinedByString:@&quot;|&quot;];\nNSLog(@&quot;%@&quot;, string2);\n\n// 判断数组中是否存在一个指定的对象\nBOOL isContain = [array5 containsObject:@&quot;three&quot;];\nNSLog(@&quot;%d&quot;, isContain);\n\n// 根据指定的对象返回索引下标\nNSInteger index = [array5 indexOfObject:@&quot;three&quot;];\nNSLog(@&quot;%d&quot;, index);\n\n// 返回数组中的最后一个元素\nNSString *lastObject = [array5 lastObject];\nNSLog(@&quot;%@&quot;, lastObject);\n</code></pre><h3 id=\"NSMutableArray的一些方法总结\"><a href=\"#NSMutableArray的一些方法总结\" class=\"headerlink\" title=\"NSMutableArray的一些方法总结\"></a>NSMutableArray的一些方法总结</h3><ul>\n<li>NSMutableArray继承自NSArray</li>\n</ul>\n<pre><code>// 可变数组\nNSMutableArray *mArray1 = [NSMutableArray array];\nNSLog(@&quot;%@&quot;, mArray1);\n\n// 创建一个有5个元素的可变数组\nNSMutableArray *mArray2 = [NSMutableArray arrayWithCapacity:5];\nNSLog(@&quot;%@&quot;, mArray2);\n\nNSMutableArray *mArray3 = [NSMutableArray arrayWithObjects:@&quot;one&quot;, @&quot;two&quot;, nil];\nNSLog(@&quot;%@&quot;, mArray3);\n\n//添加元素\n[mArray3 addObject:@&quot;three&quot;];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 插入元素\n[mArray3 insertObject:@&quot;four&quot; atIndex:3];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 移除最后一个元素\n[mArray3 removeLastObject];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 移除指定元素\n[mArray3 removeObject:@&quot;two&quot;];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 根据索引下标删除\n[mArray3 removeObjectAtIndex:1];\nNSLog(@&quot;%@&quot;, mArray3);\n\n[mArray3 addObject:@&quot;six&quot;];\n[mArray3 addObject:@&quot;seven&quot;];\n[mArray3 addObject:@&quot;eight&quot;];\n\n// 根据数组删除\nNSArray *deleteArray = [NSArray arrayWithObjects:@&quot;seven&quot;,@&quot;eight&quot;,nil];\n[mArray3 removeObjectsInArray:deleteArray];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 替换指定下标的元素\n[mArray3 replaceObjectAtIndex:1 withObject:@&quot;replace&quot;];\nNSLog(@&quot;%@&quot;, mArray3);\n</code></pre><h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><pre><code>for (NSString *tempString in array5) {\n  NSLog(@&quot;found: %@&quot;, tempString);\n}\n\n// 当不确定数组的元素的类型时,可以选择用id\nfor (id tempString in array5) {\n  NSLog(@&quot;id found: %@&quot;, tempString);\n}\n</code></pre>","excerpt":"","more":"<h3 id=\"NSArray的一些方法总结\"><a href=\"#NSArray的一些方法总结\" class=\"headerlink\" title=\"NSArray的一些方法总结\"></a>NSArray的一些方法总结</h3><pre><code>// 数组的创建\nNSArray *array1 = [NSArray arrayWithObject:@&quot;one&quot;];\nNSArray *array2 = [NSArray arrayWithObjects:@&quot;one&quot;, @&quot;two&quot;, @&quot;three&quot;, @&quot;four&quot;, @&quot;five&quot;,nil];\nNSArray *array3 = [NSArray arrayWithArray:array2];\nNSLog(@&quot;array1 : %@&quot;, array1);\nNSLog(@&quot;array2 : %@&quot;, array2);\nNSLog(@&quot;array3 : %@&quot;, array3);\nNSArray *array4 = [[NSArray alloc] initWithArray:array1];\n\n// 获取数组中元素的个数\nint count = [array2 count];\nNSLog(@&quot;%d&quot;, count);   // =&gt; 5\n\nNSString *string1 = [array2 objectAtIndex:1];\nNSLog(@&quot;%@&quot;, string1);  // =&gt; two\n\n// 追加对象,返回一个新的数组\nNSArray *array5 = [array2 arrayByAddingObject:@&quot;six&quot;];\nNSLog(@&quot;array5 : %@&quot;, array5);\n\n// 用指定的字符串把数组中的元素连接起来\nNSString *string2 = [array5 componentsJoinedByString:@&quot;|&quot;];\nNSLog(@&quot;%@&quot;, string2);\n\n// 判断数组中是否存在一个指定的对象\nBOOL isContain = [array5 containsObject:@&quot;three&quot;];\nNSLog(@&quot;%d&quot;, isContain);\n\n// 根据指定的对象返回索引下标\nNSInteger index = [array5 indexOfObject:@&quot;three&quot;];\nNSLog(@&quot;%d&quot;, index);\n\n// 返回数组中的最后一个元素\nNSString *lastObject = [array5 lastObject];\nNSLog(@&quot;%@&quot;, lastObject);\n</code></pre><h3 id=\"NSMutableArray的一些方法总结\"><a href=\"#NSMutableArray的一些方法总结\" class=\"headerlink\" title=\"NSMutableArray的一些方法总结\"></a>NSMutableArray的一些方法总结</h3><ul>\n<li>NSMutableArray继承自NSArray</li>\n</ul>\n<pre><code>// 可变数组\nNSMutableArray *mArray1 = [NSMutableArray array];\nNSLog(@&quot;%@&quot;, mArray1);\n\n// 创建一个有5个元素的可变数组\nNSMutableArray *mArray2 = [NSMutableArray arrayWithCapacity:5];\nNSLog(@&quot;%@&quot;, mArray2);\n\nNSMutableArray *mArray3 = [NSMutableArray arrayWithObjects:@&quot;one&quot;, @&quot;two&quot;, nil];\nNSLog(@&quot;%@&quot;, mArray3);\n\n//添加元素\n[mArray3 addObject:@&quot;three&quot;];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 插入元素\n[mArray3 insertObject:@&quot;four&quot; atIndex:3];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 移除最后一个元素\n[mArray3 removeLastObject];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 移除指定元素\n[mArray3 removeObject:@&quot;two&quot;];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 根据索引下标删除\n[mArray3 removeObjectAtIndex:1];\nNSLog(@&quot;%@&quot;, mArray3);\n\n[mArray3 addObject:@&quot;six&quot;];\n[mArray3 addObject:@&quot;seven&quot;];\n[mArray3 addObject:@&quot;eight&quot;];\n\n// 根据数组删除\nNSArray *deleteArray = [NSArray arrayWithObjects:@&quot;seven&quot;,@&quot;eight&quot;,nil];\n[mArray3 removeObjectsInArray:deleteArray];\nNSLog(@&quot;%@&quot;, mArray3);\n\n// 替换指定下标的元素\n[mArray3 replaceObjectAtIndex:1 withObject:@&quot;replace&quot;];\nNSLog(@&quot;%@&quot;, mArray3);\n</code></pre><h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><pre><code>for (NSString *tempString in array5) {\n  NSLog(@&quot;found: %@&quot;, tempString);\n}\n\n// 当不确定数组的元素的类型时,可以选择用id\nfor (id tempString in array5) {\n  NSLog(@&quot;id found: %@&quot;, tempString);\n}\n</code></pre>"},{"layout":"backbone","title":"Backbone Model","date":"2016-08-14T04:04:02.000Z","_content":"### 定义一个数据模型\n    var Student = Backbone.Model.extend({\n        // 默认数据\n        defaults: {\n            name: '',\n            sex: '',\n            age: 0\n        }\n    })\n\n### 实例化一个数据\n*   通过<code>new</code>关键字，传入数据并替换默认数据\n\n\n    var xiaoming = new Student({\n        name: '小明',\n        sex: 'male',\n        age: 12\n    })\n\n### 读写数据\n*   get()读数据\n*   set()方法修改数据\n*   unset()方法删除对象中制定的属性和数据\n*   clear()方法删除模型中所有的属性和数据\n*   toJSON()方法获取原始数据\n*   set unset clear都会触发事件\n\n\n    // 读 编码防止乱码和XSS问题\n    var name = xiaoming.escape('name');\n    var sex = xiaoming.get('sex')\n    var age = xiaoming.get('age')\n\n    // 修改\n    xiaoming.set('name', 'zhangxiaoming')\n    xiaoming.set('age', 14)\n    xiaoming.unset('name')\n    xiaoming.clear()\n\n### 给读写数据绑定事件\n*   只有变化的数据才会被修改和触发事件\n*   先触发属性事件，再触发所有属性事件\n\n\n    // 监听所有属性变化绑定事件\n    xiaoming.on('change', function(model){\n        console.log('model changed')\n    })\n\n    // 监听name变化事件\n    xiaoming.on('change:name', function(model){\n        console.log('name change')\n    })\n\n    // 更新数据\n    xiaoming.set({\n        name: 'xiaoming',\n        age: 18\n    })\n\n### 数据验证\n*   绑定<code>invalid</code>事件\n*   通过save()方法触发\n\n\n    // 首先给模型添加验证方法\n    var Student = Backbone.Model.extend({\n        ...\n        validate: function(data, options){\n            if(data.age < 1){\n                return '年龄不能为0'\n            }\n        }\n    })\n\n    xiaoming.on('invalid', function(model, invalid){\n        console.log(invalid)\n    })\n\n    xiaoming.save({\n        age: 0\n    })\n\n### 与服务器保持数据同步\n*   save()方法向服务器提交数据\n*   fetch()从服务器获取数据\n*   destroy()方法从服务器移除数据","source":"_posts/Model.md","raw":"layout: backbone\ntitle: Backbone Model\ndate: 2016-08-14 12:04:02\ntags: backbone\ncategories: javascript\n---\n### 定义一个数据模型\n    var Student = Backbone.Model.extend({\n        // 默认数据\n        defaults: {\n            name: '',\n            sex: '',\n            age: 0\n        }\n    })\n\n### 实例化一个数据\n*   通过<code>new</code>关键字，传入数据并替换默认数据\n\n\n    var xiaoming = new Student({\n        name: '小明',\n        sex: 'male',\n        age: 12\n    })\n\n### 读写数据\n*   get()读数据\n*   set()方法修改数据\n*   unset()方法删除对象中制定的属性和数据\n*   clear()方法删除模型中所有的属性和数据\n*   toJSON()方法获取原始数据\n*   set unset clear都会触发事件\n\n\n    // 读 编码防止乱码和XSS问题\n    var name = xiaoming.escape('name');\n    var sex = xiaoming.get('sex')\n    var age = xiaoming.get('age')\n\n    // 修改\n    xiaoming.set('name', 'zhangxiaoming')\n    xiaoming.set('age', 14)\n    xiaoming.unset('name')\n    xiaoming.clear()\n\n### 给读写数据绑定事件\n*   只有变化的数据才会被修改和触发事件\n*   先触发属性事件，再触发所有属性事件\n\n\n    // 监听所有属性变化绑定事件\n    xiaoming.on('change', function(model){\n        console.log('model changed')\n    })\n\n    // 监听name变化事件\n    xiaoming.on('change:name', function(model){\n        console.log('name change')\n    })\n\n    // 更新数据\n    xiaoming.set({\n        name: 'xiaoming',\n        age: 18\n    })\n\n### 数据验证\n*   绑定<code>invalid</code>事件\n*   通过save()方法触发\n\n\n    // 首先给模型添加验证方法\n    var Student = Backbone.Model.extend({\n        ...\n        validate: function(data, options){\n            if(data.age < 1){\n                return '年龄不能为0'\n            }\n        }\n    })\n\n    xiaoming.on('invalid', function(model, invalid){\n        console.log(invalid)\n    })\n\n    xiaoming.save({\n        age: 0\n    })\n\n### 与服务器保持数据同步\n*   save()方法向服务器提交数据\n*   fetch()从服务器获取数据\n*   destroy()方法从服务器移除数据","slug":"Model","published":1,"updated":"2016-08-14T07:09:58.062Z","comments":1,"photos":[],"link":"","_id":"ciruct5tb000518tw1l29m5sq","content":"<h3 id=\"定义一个数据模型\"><a href=\"#定义一个数据模型\" class=\"headerlink\" title=\"定义一个数据模型\"></a>定义一个数据模型</h3><pre><code>var Student = Backbone.Model.extend({\n    // 默认数据\n    defaults: {\n        name: &apos;&apos;,\n        sex: &apos;&apos;,\n        age: 0\n    }\n})\n</code></pre><h3 id=\"实例化一个数据\"><a href=\"#实例化一个数据\" class=\"headerlink\" title=\"实例化一个数据\"></a>实例化一个数据</h3><ul>\n<li>通过<code>new</code>关键字，传入数据并替换默认数据</li>\n</ul>\n<pre><code>var xiaoming = new Student({\n    name: &apos;小明&apos;,\n    sex: &apos;male&apos;,\n    age: 12\n})\n</code></pre><h3 id=\"读写数据\"><a href=\"#读写数据\" class=\"headerlink\" title=\"读写数据\"></a>读写数据</h3><ul>\n<li>get()读数据</li>\n<li>set()方法修改数据</li>\n<li>unset()方法删除对象中制定的属性和数据</li>\n<li>clear()方法删除模型中所有的属性和数据</li>\n<li>toJSON()方法获取原始数据</li>\n<li>set unset clear都会触发事件</li>\n</ul>\n<pre><code>// 读 编码防止乱码和XSS问题\nvar name = xiaoming.escape(&apos;name&apos;);\nvar sex = xiaoming.get(&apos;sex&apos;)\nvar age = xiaoming.get(&apos;age&apos;)\n\n// 修改\nxiaoming.set(&apos;name&apos;, &apos;zhangxiaoming&apos;)\nxiaoming.set(&apos;age&apos;, 14)\nxiaoming.unset(&apos;name&apos;)\nxiaoming.clear()\n</code></pre><h3 id=\"给读写数据绑定事件\"><a href=\"#给读写数据绑定事件\" class=\"headerlink\" title=\"给读写数据绑定事件\"></a>给读写数据绑定事件</h3><ul>\n<li>只有变化的数据才会被修改和触发事件</li>\n<li>先触发属性事件，再触发所有属性事件</li>\n</ul>\n<pre><code>// 监听所有属性变化绑定事件\nxiaoming.on(&apos;change&apos;, function(model){\n    console.log(&apos;model changed&apos;)\n})\n\n// 监听name变化事件\nxiaoming.on(&apos;change:name&apos;, function(model){\n    console.log(&apos;name change&apos;)\n})\n\n// 更新数据\nxiaoming.set({\n    name: &apos;xiaoming&apos;,\n    age: 18\n})\n</code></pre><h3 id=\"数据验证\"><a href=\"#数据验证\" class=\"headerlink\" title=\"数据验证\"></a>数据验证</h3><ul>\n<li>绑定<code>invalid</code>事件</li>\n<li>通过save()方法触发</li>\n</ul>\n<pre><code>// 首先给模型添加验证方法\nvar Student = Backbone.Model.extend({\n    ...\n    validate: function(data, options){\n        if(data.age &lt; 1){\n            return &apos;年龄不能为0&apos;\n        }\n    }\n})\n\nxiaoming.on(&apos;invalid&apos;, function(model, invalid){\n    console.log(invalid)\n})\n\nxiaoming.save({\n    age: 0\n})\n</code></pre><h3 id=\"与服务器保持数据同步\"><a href=\"#与服务器保持数据同步\" class=\"headerlink\" title=\"与服务器保持数据同步\"></a>与服务器保持数据同步</h3><ul>\n<li>save()方法向服务器提交数据</li>\n<li>fetch()从服务器获取数据</li>\n<li>destroy()方法从服务器移除数据</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"定义一个数据模型\"><a href=\"#定义一个数据模型\" class=\"headerlink\" title=\"定义一个数据模型\"></a>定义一个数据模型</h3><pre><code>var Student = Backbone.Model.extend({\n    // 默认数据\n    defaults: {\n        name: &apos;&apos;,\n        sex: &apos;&apos;,\n        age: 0\n    }\n})\n</code></pre><h3 id=\"实例化一个数据\"><a href=\"#实例化一个数据\" class=\"headerlink\" title=\"实例化一个数据\"></a>实例化一个数据</h3><ul>\n<li>通过<code>new</code>关键字，传入数据并替换默认数据</li>\n</ul>\n<pre><code>var xiaoming = new Student({\n    name: &apos;小明&apos;,\n    sex: &apos;male&apos;,\n    age: 12\n})\n</code></pre><h3 id=\"读写数据\"><a href=\"#读写数据\" class=\"headerlink\" title=\"读写数据\"></a>读写数据</h3><ul>\n<li>get()读数据</li>\n<li>set()方法修改数据</li>\n<li>unset()方法删除对象中制定的属性和数据</li>\n<li>clear()方法删除模型中所有的属性和数据</li>\n<li>toJSON()方法获取原始数据</li>\n<li>set unset clear都会触发事件</li>\n</ul>\n<pre><code>// 读 编码防止乱码和XSS问题\nvar name = xiaoming.escape(&apos;name&apos;);\nvar sex = xiaoming.get(&apos;sex&apos;)\nvar age = xiaoming.get(&apos;age&apos;)\n\n// 修改\nxiaoming.set(&apos;name&apos;, &apos;zhangxiaoming&apos;)\nxiaoming.set(&apos;age&apos;, 14)\nxiaoming.unset(&apos;name&apos;)\nxiaoming.clear()\n</code></pre><h3 id=\"给读写数据绑定事件\"><a href=\"#给读写数据绑定事件\" class=\"headerlink\" title=\"给读写数据绑定事件\"></a>给读写数据绑定事件</h3><ul>\n<li>只有变化的数据才会被修改和触发事件</li>\n<li>先触发属性事件，再触发所有属性事件</li>\n</ul>\n<pre><code>// 监听所有属性变化绑定事件\nxiaoming.on(&apos;change&apos;, function(model){\n    console.log(&apos;model changed&apos;)\n})\n\n// 监听name变化事件\nxiaoming.on(&apos;change:name&apos;, function(model){\n    console.log(&apos;name change&apos;)\n})\n\n// 更新数据\nxiaoming.set({\n    name: &apos;xiaoming&apos;,\n    age: 18\n})\n</code></pre><h3 id=\"数据验证\"><a href=\"#数据验证\" class=\"headerlink\" title=\"数据验证\"></a>数据验证</h3><ul>\n<li>绑定<code>invalid</code>事件</li>\n<li>通过save()方法触发</li>\n</ul>\n<pre><code>// 首先给模型添加验证方法\nvar Student = Backbone.Model.extend({\n    ...\n    validate: function(data, options){\n        if(data.age &lt; 1){\n            return &apos;年龄不能为0&apos;\n        }\n    }\n})\n\nxiaoming.on(&apos;invalid&apos;, function(model, invalid){\n    console.log(invalid)\n})\n\nxiaoming.save({\n    age: 0\n})\n</code></pre><h3 id=\"与服务器保持数据同步\"><a href=\"#与服务器保持数据同步\" class=\"headerlink\" title=\"与服务器保持数据同步\"></a>与服务器保持数据同步</h3><ul>\n<li>save()方法向服务器提交数据</li>\n<li>fetch()从服务器获取数据</li>\n<li>destroy()方法从服务器移除数据</li>\n</ul>\n"},{"title":"NSDictionary和NSMutableDictionary","_content":"### NSDictionary的一些方法总结\n    \n    NSDictionary *dic1 = [NSDictionary dictionaryWithObject:@\"value\" forKey:@\"k1\"];\n    NSDictionary *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\", nil];\n    NSDictionary *dic3 = [NSDictionary dictionaryWithDictionary:dic1];\n    NSLog(@\"%@\", dic1);\n    NSLog(@\"%@\", dic2);\n    NSLog(@\"%@\", dic3);\n    \n    // 获取字典的数量\n    int count = [dic2 count];\n    NSLog(@\"count : %d\", count);\n    \n    // 获取字典的value\n    NSString *string1 = [dic2 objectForKey:@\"k3\"];\n    NSLog(@\"value: %@\", string1);\n    \n    // 获取字典的所有key\n    NSArray *keyArray = [dic2 allKeys];\n    NSLog(@\"%@\", keyArray);\n    \n    // 获取字典的所有value\n    NSArray *valueArray = [dic2 allValues];\n    NSLog(@\"%@\", valueArray);\n\n\n\n### NSMutableDictionary的一些方法总结\n* NSMutableDictionary继承自NSDictionary\n\n\n    NSMutableDictionary *mutableDic1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\",@\"v4\",@\"k4\", nil];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典加入元素\n    NSDictionary *dic4 = [NSDictionary dictionaryWithObject:@\"v5\" forKey:@\"k5\"];\n    [mutableDic1 addEntriesFromDictionary:dic4];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典中直接添加新的\n    [mutableDic1 setValue:@\"object\" forKey:@\"key\"];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 创建一个空的可变字典\n    NSMutableDictionary *mutableDic2 = [NSMutableDictionary dictionary];\n    [mutableDic2 setDictionary:mutableDic1];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 根据指定的key\n    [mutableDic2 removeObjectForKey:@\"k4\"];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 删除一组key\n    NSArray *keys = [NSArray arrayWithObjects:@\"k1\",@\"k2\", nil];\n    [mutableDic2 removeObjectsForKeys:keys];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n\n    // 删除所有的内容\n    [mutableDic2 removeAllObjects];\n\n### 遍历字典\n    \n    for (int index = 0; index < [mutableDic1 count]; index++) {\n      NSString *object = [mutableDic1 objectForKey:[[mutableDic1 allKeys] objectAtIndex:index]];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 快速枚举\n    for (id key in mutableDic1) {\n      NSString *object = [mutableDic1 objectForKey:key];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 使用枚举类型\n    NSEnumerator *enumerator = [mutableDic1 keyEnumerator];\n    id key = [enumerator nextObject];\n    while (key = [enumerator nextObject]) {\n      id object = [mutableDic1 objectForKey:key];\n      NSLog(@\"%@\", object);   \n    }","source":"_posts/NSDictionary和NSMutableDictionary.md","raw":"title: \"NSDictionary和NSMutableDictionary\"\ncategories: swift\n---\n### NSDictionary的一些方法总结\n    \n    NSDictionary *dic1 = [NSDictionary dictionaryWithObject:@\"value\" forKey:@\"k1\"];\n    NSDictionary *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\", nil];\n    NSDictionary *dic3 = [NSDictionary dictionaryWithDictionary:dic1];\n    NSLog(@\"%@\", dic1);\n    NSLog(@\"%@\", dic2);\n    NSLog(@\"%@\", dic3);\n    \n    // 获取字典的数量\n    int count = [dic2 count];\n    NSLog(@\"count : %d\", count);\n    \n    // 获取字典的value\n    NSString *string1 = [dic2 objectForKey:@\"k3\"];\n    NSLog(@\"value: %@\", string1);\n    \n    // 获取字典的所有key\n    NSArray *keyArray = [dic2 allKeys];\n    NSLog(@\"%@\", keyArray);\n    \n    // 获取字典的所有value\n    NSArray *valueArray = [dic2 allValues];\n    NSLog(@\"%@\", valueArray);\n\n\n\n### NSMutableDictionary的一些方法总结\n* NSMutableDictionary继承自NSDictionary\n\n\n    NSMutableDictionary *mutableDic1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@\"v1\",@\"k1\",@\"v2\",@\"k2\",@\"v3\",@\"k3\",@\"v4\",@\"k4\", nil];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典加入元素\n    NSDictionary *dic4 = [NSDictionary dictionaryWithObject:@\"v5\" forKey:@\"k5\"];\n    [mutableDic1 addEntriesFromDictionary:dic4];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 可变字典中直接添加新的\n    [mutableDic1 setValue:@\"object\" forKey:@\"key\"];\n    NSLog(@\"mutableDict1: %@\", mutableDic1);\n    \n    // 创建一个空的可变字典\n    NSMutableDictionary *mutableDic2 = [NSMutableDictionary dictionary];\n    [mutableDic2 setDictionary:mutableDic1];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 根据指定的key\n    [mutableDic2 removeObjectForKey:@\"k4\"];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n    \n    // 删除一组key\n    NSArray *keys = [NSArray arrayWithObjects:@\"k1\",@\"k2\", nil];\n    [mutableDic2 removeObjectsForKeys:keys];\n    NSLog(@\"mutableDict2: %@\", mutableDic2);\n\n    // 删除所有的内容\n    [mutableDic2 removeAllObjects];\n\n### 遍历字典\n    \n    for (int index = 0; index < [mutableDic1 count]; index++) {\n      NSString *object = [mutableDic1 objectForKey:[[mutableDic1 allKeys] objectAtIndex:index]];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 快速枚举\n    for (id key in mutableDic1) {\n      NSString *object = [mutableDic1 objectForKey:key];\n      NSLog(@\"object: %@\", object);\n    }\n    \n    // 使用枚举类型\n    NSEnumerator *enumerator = [mutableDic1 keyEnumerator];\n    id key = [enumerator nextObject];\n    while (key = [enumerator nextObject]) {\n      id object = [mutableDic1 objectForKey:key];\n      NSLog(@\"%@\", object);   \n    }","slug":"NSDictionary和NSMutableDictionary","published":1,"date":"2016-08-14T07:09:45.746Z","updated":"2016-08-14T07:09:45.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5tf000618tw869jpfk6","content":"<h3 id=\"NSDictionary的一些方法总结\"><a href=\"#NSDictionary的一些方法总结\" class=\"headerlink\" title=\"NSDictionary的一些方法总结\"></a>NSDictionary的一些方法总结</h3><pre><code>NSDictionary *dic1 = [NSDictionary dictionaryWithObject:@&quot;value&quot; forKey:@&quot;k1&quot;];\nNSDictionary *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;v1&quot;,@&quot;k1&quot;,@&quot;v2&quot;,@&quot;k2&quot;,@&quot;v3&quot;,@&quot;k3&quot;, nil];\nNSDictionary *dic3 = [NSDictionary dictionaryWithDictionary:dic1];\nNSLog(@&quot;%@&quot;, dic1);\nNSLog(@&quot;%@&quot;, dic2);\nNSLog(@&quot;%@&quot;, dic3);\n\n// 获取字典的数量\nint count = [dic2 count];\nNSLog(@&quot;count : %d&quot;, count);\n\n// 获取字典的value\nNSString *string1 = [dic2 objectForKey:@&quot;k3&quot;];\nNSLog(@&quot;value: %@&quot;, string1);\n\n// 获取字典的所有key\nNSArray *keyArray = [dic2 allKeys];\nNSLog(@&quot;%@&quot;, keyArray);\n\n// 获取字典的所有value\nNSArray *valueArray = [dic2 allValues];\nNSLog(@&quot;%@&quot;, valueArray);\n</code></pre><h3 id=\"NSMutableDictionary的一些方法总结\"><a href=\"#NSMutableDictionary的一些方法总结\" class=\"headerlink\" title=\"NSMutableDictionary的一些方法总结\"></a>NSMutableDictionary的一些方法总结</h3><ul>\n<li>NSMutableDictionary继承自NSDictionary</li>\n</ul>\n<pre><code>NSMutableDictionary *mutableDic1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@&quot;v1&quot;,@&quot;k1&quot;,@&quot;v2&quot;,@&quot;k2&quot;,@&quot;v3&quot;,@&quot;k3&quot;,@&quot;v4&quot;,@&quot;k4&quot;, nil];\nNSLog(@&quot;mutableDict1: %@&quot;, mutableDic1);\n\n// 可变字典加入元素\nNSDictionary *dic4 = [NSDictionary dictionaryWithObject:@&quot;v5&quot; forKey:@&quot;k5&quot;];\n[mutableDic1 addEntriesFromDictionary:dic4];\nNSLog(@&quot;mutableDict1: %@&quot;, mutableDic1);\n\n// 可变字典中直接添加新的\n[mutableDic1 setValue:@&quot;object&quot; forKey:@&quot;key&quot;];\nNSLog(@&quot;mutableDict1: %@&quot;, mutableDic1);\n\n// 创建一个空的可变字典\nNSMutableDictionary *mutableDic2 = [NSMutableDictionary dictionary];\n[mutableDic2 setDictionary:mutableDic1];\nNSLog(@&quot;mutableDict2: %@&quot;, mutableDic2);\n\n// 根据指定的key\n[mutableDic2 removeObjectForKey:@&quot;k4&quot;];\nNSLog(@&quot;mutableDict2: %@&quot;, mutableDic2);\n\n// 删除一组key\nNSArray *keys = [NSArray arrayWithObjects:@&quot;k1&quot;,@&quot;k2&quot;, nil];\n[mutableDic2 removeObjectsForKeys:keys];\nNSLog(@&quot;mutableDict2: %@&quot;, mutableDic2);\n\n// 删除所有的内容\n[mutableDic2 removeAllObjects];\n</code></pre><h3 id=\"遍历字典\"><a href=\"#遍历字典\" class=\"headerlink\" title=\"遍历字典\"></a>遍历字典</h3><pre><code>for (int index = 0; index &lt; [mutableDic1 count]; index++) {\n  NSString *object = [mutableDic1 objectForKey:[[mutableDic1 allKeys] objectAtIndex:index]];\n  NSLog(@&quot;object: %@&quot;, object);\n}\n\n// 快速枚举\nfor (id key in mutableDic1) {\n  NSString *object = [mutableDic1 objectForKey:key];\n  NSLog(@&quot;object: %@&quot;, object);\n}\n\n// 使用枚举类型\nNSEnumerator *enumerator = [mutableDic1 keyEnumerator];\nid key = [enumerator nextObject];\nwhile (key = [enumerator nextObject]) {\n  id object = [mutableDic1 objectForKey:key];\n  NSLog(@&quot;%@&quot;, object);   \n}\n</code></pre>","excerpt":"","more":"<h3 id=\"NSDictionary的一些方法总结\"><a href=\"#NSDictionary的一些方法总结\" class=\"headerlink\" title=\"NSDictionary的一些方法总结\"></a>NSDictionary的一些方法总结</h3><pre><code>NSDictionary *dic1 = [NSDictionary dictionaryWithObject:@&quot;value&quot; forKey:@&quot;k1&quot;];\nNSDictionary *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;v1&quot;,@&quot;k1&quot;,@&quot;v2&quot;,@&quot;k2&quot;,@&quot;v3&quot;,@&quot;k3&quot;, nil];\nNSDictionary *dic3 = [NSDictionary dictionaryWithDictionary:dic1];\nNSLog(@&quot;%@&quot;, dic1);\nNSLog(@&quot;%@&quot;, dic2);\nNSLog(@&quot;%@&quot;, dic3);\n\n// 获取字典的数量\nint count = [dic2 count];\nNSLog(@&quot;count : %d&quot;, count);\n\n// 获取字典的value\nNSString *string1 = [dic2 objectForKey:@&quot;k3&quot;];\nNSLog(@&quot;value: %@&quot;, string1);\n\n// 获取字典的所有key\nNSArray *keyArray = [dic2 allKeys];\nNSLog(@&quot;%@&quot;, keyArray);\n\n// 获取字典的所有value\nNSArray *valueArray = [dic2 allValues];\nNSLog(@&quot;%@&quot;, valueArray);\n</code></pre><h3 id=\"NSMutableDictionary的一些方法总结\"><a href=\"#NSMutableDictionary的一些方法总结\" class=\"headerlink\" title=\"NSMutableDictionary的一些方法总结\"></a>NSMutableDictionary的一些方法总结</h3><ul>\n<li>NSMutableDictionary继承自NSDictionary</li>\n</ul>\n<pre><code>NSMutableDictionary *mutableDic1 = [[NSMutableDictionary alloc] initWithObjectsAndKeys:@&quot;v1&quot;,@&quot;k1&quot;,@&quot;v2&quot;,@&quot;k2&quot;,@&quot;v3&quot;,@&quot;k3&quot;,@&quot;v4&quot;,@&quot;k4&quot;, nil];\nNSLog(@&quot;mutableDict1: %@&quot;, mutableDic1);\n\n// 可变字典加入元素\nNSDictionary *dic4 = [NSDictionary dictionaryWithObject:@&quot;v5&quot; forKey:@&quot;k5&quot;];\n[mutableDic1 addEntriesFromDictionary:dic4];\nNSLog(@&quot;mutableDict1: %@&quot;, mutableDic1);\n\n// 可变字典中直接添加新的\n[mutableDic1 setValue:@&quot;object&quot; forKey:@&quot;key&quot;];\nNSLog(@&quot;mutableDict1: %@&quot;, mutableDic1);\n\n// 创建一个空的可变字典\nNSMutableDictionary *mutableDic2 = [NSMutableDictionary dictionary];\n[mutableDic2 setDictionary:mutableDic1];\nNSLog(@&quot;mutableDict2: %@&quot;, mutableDic2);\n\n// 根据指定的key\n[mutableDic2 removeObjectForKey:@&quot;k4&quot;];\nNSLog(@&quot;mutableDict2: %@&quot;, mutableDic2);\n\n// 删除一组key\nNSArray *keys = [NSArray arrayWithObjects:@&quot;k1&quot;,@&quot;k2&quot;, nil];\n[mutableDic2 removeObjectsForKeys:keys];\nNSLog(@&quot;mutableDict2: %@&quot;, mutableDic2);\n\n// 删除所有的内容\n[mutableDic2 removeAllObjects];\n</code></pre><h3 id=\"遍历字典\"><a href=\"#遍历字典\" class=\"headerlink\" title=\"遍历字典\"></a>遍历字典</h3><pre><code>for (int index = 0; index &lt; [mutableDic1 count]; index++) {\n  NSString *object = [mutableDic1 objectForKey:[[mutableDic1 allKeys] objectAtIndex:index]];\n  NSLog(@&quot;object: %@&quot;, object);\n}\n\n// 快速枚举\nfor (id key in mutableDic1) {\n  NSString *object = [mutableDic1 objectForKey:key];\n  NSLog(@&quot;object: %@&quot;, object);\n}\n\n// 使用枚举类型\nNSEnumerator *enumerator = [mutableDic1 keyEnumerator];\nid key = [enumerator nextObject];\nwhile (key = [enumerator nextObject]) {\n  id object = [mutableDic1 objectForKey:key];\n  NSLog(@&quot;%@&quot;, object);   \n}\n</code></pre>"},{"title":"NSNumber","_content":"\n### NSNumber对象的一些方法总结\n\n    // 创建一个基本的NSNumber对象\n    NSNumber *numberInt = [NSNumber numberWithInt: 10];   // 创建和初始化类方法\n    NSNumber *numberFloat = [[NSNumber alloc] initWithFloat: 10.8]; // 初始化实例方法\n    \n    // 还原成基本数据类型\n    int basicInt = [numberInt intValue];\n    float baseFloat = [numberFloat floatValue];\n\n    // 比较两个对象是否相等\n    if ([numberInt isEqualToNumber: numberFloat] == YES) {\n      NSLog(@\"相等\");\n    } else {\n      NSLog(@\"不等\");\n    }\n\n    // 比较两个对象的大小\n    if ( [numberInt compare:numberFloat] == NSOrderedAscending) {  \n      NSLog(@\"左边的数字小\");  \n    } else {  \n      NSLog(@\"左边的数字大\");  \n    }","source":"_posts/NSNumber.md","raw":"title: \"NSNumber\"\ncategories: swift\n---\n\n### NSNumber对象的一些方法总结\n\n    // 创建一个基本的NSNumber对象\n    NSNumber *numberInt = [NSNumber numberWithInt: 10];   // 创建和初始化类方法\n    NSNumber *numberFloat = [[NSNumber alloc] initWithFloat: 10.8]; // 初始化实例方法\n    \n    // 还原成基本数据类型\n    int basicInt = [numberInt intValue];\n    float baseFloat = [numberFloat floatValue];\n\n    // 比较两个对象是否相等\n    if ([numberInt isEqualToNumber: numberFloat] == YES) {\n      NSLog(@\"相等\");\n    } else {\n      NSLog(@\"不等\");\n    }\n\n    // 比较两个对象的大小\n    if ( [numberInt compare:numberFloat] == NSOrderedAscending) {  \n      NSLog(@\"左边的数字小\");  \n    } else {  \n      NSLog(@\"左边的数字大\");  \n    }","slug":"NSNumber","published":1,"date":"2016-08-14T07:09:45.749Z","updated":"2016-08-14T07:09:45.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5tg000818twhewofc7l","content":"<h3 id=\"NSNumber对象的一些方法总结\"><a href=\"#NSNumber对象的一些方法总结\" class=\"headerlink\" title=\"NSNumber对象的一些方法总结\"></a>NSNumber对象的一些方法总结</h3><pre><code>// 创建一个基本的NSNumber对象\nNSNumber *numberInt = [NSNumber numberWithInt: 10];   // 创建和初始化类方法\nNSNumber *numberFloat = [[NSNumber alloc] initWithFloat: 10.8]; // 初始化实例方法\n\n// 还原成基本数据类型\nint basicInt = [numberInt intValue];\nfloat baseFloat = [numberFloat floatValue];\n\n// 比较两个对象是否相等\nif ([numberInt isEqualToNumber: numberFloat] == YES) {\n  NSLog(@&quot;相等&quot;);\n} else {\n  NSLog(@&quot;不等&quot;);\n}\n\n// 比较两个对象的大小\nif ( [numberInt compare:numberFloat] == NSOrderedAscending) {  \n  NSLog(@&quot;左边的数字小&quot;);  \n} else {  \n  NSLog(@&quot;左边的数字大&quot;);  \n}\n</code></pre>","excerpt":"","more":"<h3 id=\"NSNumber对象的一些方法总结\"><a href=\"#NSNumber对象的一些方法总结\" class=\"headerlink\" title=\"NSNumber对象的一些方法总结\"></a>NSNumber对象的一些方法总结</h3><pre><code>// 创建一个基本的NSNumber对象\nNSNumber *numberInt = [NSNumber numberWithInt: 10];   // 创建和初始化类方法\nNSNumber *numberFloat = [[NSNumber alloc] initWithFloat: 10.8]; // 初始化实例方法\n\n// 还原成基本数据类型\nint basicInt = [numberInt intValue];\nfloat baseFloat = [numberFloat floatValue];\n\n// 比较两个对象是否相等\nif ([numberInt isEqualToNumber: numberFloat] == YES) {\n  NSLog(@&quot;相等&quot;);\n} else {\n  NSLog(@&quot;不等&quot;);\n}\n\n// 比较两个对象的大小\nif ( [numberInt compare:numberFloat] == NSOrderedAscending) {  \n  NSLog(@&quot;左边的数字小&quot;);  \n} else {  \n  NSLog(@&quot;左边的数字大&quot;);  \n}\n</code></pre>"},{"title":"NSString","_content":"\n### NSString对象的一些方法总结\n* NSString对象一旦被创建就不可以修改.如果需要一个可以更改的字符串对象,需要创建NSMutableString实例\n\n\n    /*\n     *  创建字符串\n     */\n    // 创建一个字符串常量\n    NSString *string1 = @\"这是一个字符串常量\";\n\n    // 创建一个空的字符串\n    NSString *string2 = [[NSString alloc] init];  // 实例方法创建\n    NSString *string3 = [NSString string];        // 类方法创建\n\n    // 快速创建一个字符串\n    NSString *string4 = [[NSString alloc] initWithString: @\"abc\"];   // 实例方法创建\n    NSString *string5 = [NSString stringWithString:@\"xyz\"];          // 类方法创建\n\n    // 创建一个格式化的字符串\n    NSString *string6 = [[NSString alloc] initWithFormat:@\"整数:%d\", 10];  // 实例方法创建\n    NSString *string7 = [NSString stringWithFormat:@\"浮点数:%f\", 10.8];      // 类方法创建\n\n    /*\n     *  比较字符串是否相等\n     */\n    if ([string4 isEqualToString:string5]) {\n        NSLog(@\"same\");\n    } else {\n        NSLog(@\"different\");\n    }\n\n    /*\n     *  测试字符串是否为同一对象\n     */\n    if (string4 == string5) {\n        NSLog(@\"same pointer\");\n    } else {\n        NSLog(@\"different pointer\");\n    }\n\n    /*\n     *  比较字符串的大小\n     *  caseInsensitiveCompare 升序\n     *  localizedCompare\n     */\n    NSComparisonResult result = [string4 caseInsensitiveCompare:string5];\n\n    /**\n     *  求字符串的长度\n     */\n    NSLog(@\"%d\", [string4 length]);\n\n    /**\n     *  字符串的转换\n     */\n    [string4 uppercaseString];   // 字母都大写\n    [string4 lowercaseString];   // 字母都小写\n    [string4 capitalizedString]; // 首字幕大写\n\n    /**\n     *  字符串转化为基本数据类型\n     */\n    float floatNumber = [string7 floatValue];  // 转化为浮点数\n\n    /**\n     * 把字符串转化为数组\n     */\n    NSString *string8 = @\"abc def xyz\";\n    NSArray *array1 = [string8 componentsSeparatedByString:@\" \"];\n    NSLog(@\"%@\", array1);\n\n    /**\n     * 字符串的截取\n     */\n    NSString *string9 = @\"abcde\";\n    NSString *subString1 = [string9 substringToIndex:3];   // 截取到哪个位置 => abc\n    NSString *subString2 = [string9 substringFromIndex:3]; // 从哪个位置开始截取 => de\n    NSRange range;\n    range.location = 1;\n    range.length = 3;\n    NSString *subString3 = [string9 substringWithRange:range];\n    NSLog(@\"%@\", subString3);\n\n    /**\n     * 字符串的拼接\n     */\n    NSString *string16 = @\"abc\";\n    NSString *string17 = @\"xyz\";\n    \n    NSString *addString1 = [[NSString alloc] initWithFormat:@\"%@%@\", string16, string17];\n    NSString *addString2 = [string16 stringByAppendingFormat:@\"%@\", string17];\n    NSString *addString3 = [string16 stringByAppendingString:string17];\n    NSLog(@\"%@\", addString1);\n    NSLog(@\"%@\", addString2);\n    NSLog(@\"%@\", addString3);\n        \n    /**\n     * 查找字符串\n     */\n    NSString *link = @\"abcdefgtargetxyz\";\n    NSRange range1 = [link rangeOfString:@\"target\"];\n    NSLog(@\"%@\", NSStringFromRange(range1));\n    if(range1.location != NSNotFound) {\n        NSLog(@\"founded\");\n    }\n    \n    /**\n     * 可变字符串\n     */\n    \n    // 插入\n    NSMutableString *mutableString1 = [[NSMutableString alloc] initWithFormat:@\"abc\"];\n    [mutableString1 insertString:@\"..xyz..\" atIndex:1];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 替换\n    [mutableString1 replaceCharactersInRange:NSMakeRange(1, 2) withString:@\"efg\"];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 删除\n    [mutableString1 deleteCharactersInRange:NSMakeRange(0, 3)];\n    NSLog(@\"%@\", mutableString1);\n","source":"_posts/NSString.md","raw":"title: \"NSString\"\ncategories: swift\n---\n\n### NSString对象的一些方法总结\n* NSString对象一旦被创建就不可以修改.如果需要一个可以更改的字符串对象,需要创建NSMutableString实例\n\n\n    /*\n     *  创建字符串\n     */\n    // 创建一个字符串常量\n    NSString *string1 = @\"这是一个字符串常量\";\n\n    // 创建一个空的字符串\n    NSString *string2 = [[NSString alloc] init];  // 实例方法创建\n    NSString *string3 = [NSString string];        // 类方法创建\n\n    // 快速创建一个字符串\n    NSString *string4 = [[NSString alloc] initWithString: @\"abc\"];   // 实例方法创建\n    NSString *string5 = [NSString stringWithString:@\"xyz\"];          // 类方法创建\n\n    // 创建一个格式化的字符串\n    NSString *string6 = [[NSString alloc] initWithFormat:@\"整数:%d\", 10];  // 实例方法创建\n    NSString *string7 = [NSString stringWithFormat:@\"浮点数:%f\", 10.8];      // 类方法创建\n\n    /*\n     *  比较字符串是否相等\n     */\n    if ([string4 isEqualToString:string5]) {\n        NSLog(@\"same\");\n    } else {\n        NSLog(@\"different\");\n    }\n\n    /*\n     *  测试字符串是否为同一对象\n     */\n    if (string4 == string5) {\n        NSLog(@\"same pointer\");\n    } else {\n        NSLog(@\"different pointer\");\n    }\n\n    /*\n     *  比较字符串的大小\n     *  caseInsensitiveCompare 升序\n     *  localizedCompare\n     */\n    NSComparisonResult result = [string4 caseInsensitiveCompare:string5];\n\n    /**\n     *  求字符串的长度\n     */\n    NSLog(@\"%d\", [string4 length]);\n\n    /**\n     *  字符串的转换\n     */\n    [string4 uppercaseString];   // 字母都大写\n    [string4 lowercaseString];   // 字母都小写\n    [string4 capitalizedString]; // 首字幕大写\n\n    /**\n     *  字符串转化为基本数据类型\n     */\n    float floatNumber = [string7 floatValue];  // 转化为浮点数\n\n    /**\n     * 把字符串转化为数组\n     */\n    NSString *string8 = @\"abc def xyz\";\n    NSArray *array1 = [string8 componentsSeparatedByString:@\" \"];\n    NSLog(@\"%@\", array1);\n\n    /**\n     * 字符串的截取\n     */\n    NSString *string9 = @\"abcde\";\n    NSString *subString1 = [string9 substringToIndex:3];   // 截取到哪个位置 => abc\n    NSString *subString2 = [string9 substringFromIndex:3]; // 从哪个位置开始截取 => de\n    NSRange range;\n    range.location = 1;\n    range.length = 3;\n    NSString *subString3 = [string9 substringWithRange:range];\n    NSLog(@\"%@\", subString3);\n\n    /**\n     * 字符串的拼接\n     */\n    NSString *string16 = @\"abc\";\n    NSString *string17 = @\"xyz\";\n    \n    NSString *addString1 = [[NSString alloc] initWithFormat:@\"%@%@\", string16, string17];\n    NSString *addString2 = [string16 stringByAppendingFormat:@\"%@\", string17];\n    NSString *addString3 = [string16 stringByAppendingString:string17];\n    NSLog(@\"%@\", addString1);\n    NSLog(@\"%@\", addString2);\n    NSLog(@\"%@\", addString3);\n        \n    /**\n     * 查找字符串\n     */\n    NSString *link = @\"abcdefgtargetxyz\";\n    NSRange range1 = [link rangeOfString:@\"target\"];\n    NSLog(@\"%@\", NSStringFromRange(range1));\n    if(range1.location != NSNotFound) {\n        NSLog(@\"founded\");\n    }\n    \n    /**\n     * 可变字符串\n     */\n    \n    // 插入\n    NSMutableString *mutableString1 = [[NSMutableString alloc] initWithFormat:@\"abc\"];\n    [mutableString1 insertString:@\"..xyz..\" atIndex:1];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 替换\n    [mutableString1 replaceCharactersInRange:NSMakeRange(1, 2) withString:@\"efg\"];\n    NSLog(@\"%@\", mutableString1);\n    \n    // 删除\n    [mutableString1 deleteCharactersInRange:NSMakeRange(0, 3)];\n    NSLog(@\"%@\", mutableString1);\n","slug":"NSString","published":1,"date":"2016-08-14T07:09:45.754Z","updated":"2016-08-14T07:09:45.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5tk000b18tw44m2zeb3","content":"<h3 id=\"NSString对象的一些方法总结\"><a href=\"#NSString对象的一些方法总结\" class=\"headerlink\" title=\"NSString对象的一些方法总结\"></a>NSString对象的一些方法总结</h3><ul>\n<li>NSString对象一旦被创建就不可以修改.如果需要一个可以更改的字符串对象,需要创建NSMutableString实例</li>\n</ul>\n<pre><code>/*\n *  创建字符串\n */\n// 创建一个字符串常量\nNSString *string1 = @&quot;这是一个字符串常量&quot;;\n\n// 创建一个空的字符串\nNSString *string2 = [[NSString alloc] init];  // 实例方法创建\nNSString *string3 = [NSString string];        // 类方法创建\n\n// 快速创建一个字符串\nNSString *string4 = [[NSString alloc] initWithString: @&quot;abc&quot;];   // 实例方法创建\nNSString *string5 = [NSString stringWithString:@&quot;xyz&quot;];          // 类方法创建\n\n// 创建一个格式化的字符串\nNSString *string6 = [[NSString alloc] initWithFormat:@&quot;整数:%d&quot;, 10];  // 实例方法创建\nNSString *string7 = [NSString stringWithFormat:@&quot;浮点数:%f&quot;, 10.8];      // 类方法创建\n\n/*\n *  比较字符串是否相等\n */\nif ([string4 isEqualToString:string5]) {\n    NSLog(@&quot;same&quot;);\n} else {\n    NSLog(@&quot;different&quot;);\n}\n\n/*\n *  测试字符串是否为同一对象\n */\nif (string4 == string5) {\n    NSLog(@&quot;same pointer&quot;);\n} else {\n    NSLog(@&quot;different pointer&quot;);\n}\n\n/*\n *  比较字符串的大小\n *  caseInsensitiveCompare 升序\n *  localizedCompare\n */\nNSComparisonResult result = [string4 caseInsensitiveCompare:string5];\n\n/**\n *  求字符串的长度\n */\nNSLog(@&quot;%d&quot;, [string4 length]);\n\n/**\n *  字符串的转换\n */\n[string4 uppercaseString];   // 字母都大写\n[string4 lowercaseString];   // 字母都小写\n[string4 capitalizedString]; // 首字幕大写\n\n/**\n *  字符串转化为基本数据类型\n */\nfloat floatNumber = [string7 floatValue];  // 转化为浮点数\n\n/**\n * 把字符串转化为数组\n */\nNSString *string8 = @&quot;abc def xyz&quot;;\nNSArray *array1 = [string8 componentsSeparatedByString:@&quot; &quot;];\nNSLog(@&quot;%@&quot;, array1);\n\n/**\n * 字符串的截取\n */\nNSString *string9 = @&quot;abcde&quot;;\nNSString *subString1 = [string9 substringToIndex:3];   // 截取到哪个位置 =&gt; abc\nNSString *subString2 = [string9 substringFromIndex:3]; // 从哪个位置开始截取 =&gt; de\nNSRange range;\nrange.location = 1;\nrange.length = 3;\nNSString *subString3 = [string9 substringWithRange:range];\nNSLog(@&quot;%@&quot;, subString3);\n\n/**\n * 字符串的拼接\n */\nNSString *string16 = @&quot;abc&quot;;\nNSString *string17 = @&quot;xyz&quot;;\n\nNSString *addString1 = [[NSString alloc] initWithFormat:@&quot;%@%@&quot;, string16, string17];\nNSString *addString2 = [string16 stringByAppendingFormat:@&quot;%@&quot;, string17];\nNSString *addString3 = [string16 stringByAppendingString:string17];\nNSLog(@&quot;%@&quot;, addString1);\nNSLog(@&quot;%@&quot;, addString2);\nNSLog(@&quot;%@&quot;, addString3);\n\n/**\n * 查找字符串\n */\nNSString *link = @&quot;abcdefgtargetxyz&quot;;\nNSRange range1 = [link rangeOfString:@&quot;target&quot;];\nNSLog(@&quot;%@&quot;, NSStringFromRange(range1));\nif(range1.location != NSNotFound) {\n    NSLog(@&quot;founded&quot;);\n}\n\n/**\n * 可变字符串\n */\n\n// 插入\nNSMutableString *mutableString1 = [[NSMutableString alloc] initWithFormat:@&quot;abc&quot;];\n[mutableString1 insertString:@&quot;..xyz..&quot; atIndex:1];\nNSLog(@&quot;%@&quot;, mutableString1);\n\n// 替换\n[mutableString1 replaceCharactersInRange:NSMakeRange(1, 2) withString:@&quot;efg&quot;];\nNSLog(@&quot;%@&quot;, mutableString1);\n\n// 删除\n[mutableString1 deleteCharactersInRange:NSMakeRange(0, 3)];\nNSLog(@&quot;%@&quot;, mutableString1);\n</code></pre>","excerpt":"","more":"<h3 id=\"NSString对象的一些方法总结\"><a href=\"#NSString对象的一些方法总结\" class=\"headerlink\" title=\"NSString对象的一些方法总结\"></a>NSString对象的一些方法总结</h3><ul>\n<li>NSString对象一旦被创建就不可以修改.如果需要一个可以更改的字符串对象,需要创建NSMutableString实例</li>\n</ul>\n<pre><code>/*\n *  创建字符串\n */\n// 创建一个字符串常量\nNSString *string1 = @&quot;这是一个字符串常量&quot;;\n\n// 创建一个空的字符串\nNSString *string2 = [[NSString alloc] init];  // 实例方法创建\nNSString *string3 = [NSString string];        // 类方法创建\n\n// 快速创建一个字符串\nNSString *string4 = [[NSString alloc] initWithString: @&quot;abc&quot;];   // 实例方法创建\nNSString *string5 = [NSString stringWithString:@&quot;xyz&quot;];          // 类方法创建\n\n// 创建一个格式化的字符串\nNSString *string6 = [[NSString alloc] initWithFormat:@&quot;整数:%d&quot;, 10];  // 实例方法创建\nNSString *string7 = [NSString stringWithFormat:@&quot;浮点数:%f&quot;, 10.8];      // 类方法创建\n\n/*\n *  比较字符串是否相等\n */\nif ([string4 isEqualToString:string5]) {\n    NSLog(@&quot;same&quot;);\n} else {\n    NSLog(@&quot;different&quot;);\n}\n\n/*\n *  测试字符串是否为同一对象\n */\nif (string4 == string5) {\n    NSLog(@&quot;same pointer&quot;);\n} else {\n    NSLog(@&quot;different pointer&quot;);\n}\n\n/*\n *  比较字符串的大小\n *  caseInsensitiveCompare 升序\n *  localizedCompare\n */\nNSComparisonResult result = [string4 caseInsensitiveCompare:string5];\n\n/**\n *  求字符串的长度\n */\nNSLog(@&quot;%d&quot;, [string4 length]);\n\n/**\n *  字符串的转换\n */\n[string4 uppercaseString];   // 字母都大写\n[string4 lowercaseString];   // 字母都小写\n[string4 capitalizedString]; // 首字幕大写\n\n/**\n *  字符串转化为基本数据类型\n */\nfloat floatNumber = [string7 floatValue];  // 转化为浮点数\n\n/**\n * 把字符串转化为数组\n */\nNSString *string8 = @&quot;abc def xyz&quot;;\nNSArray *array1 = [string8 componentsSeparatedByString:@&quot; &quot;];\nNSLog(@&quot;%@&quot;, array1);\n\n/**\n * 字符串的截取\n */\nNSString *string9 = @&quot;abcde&quot;;\nNSString *subString1 = [string9 substringToIndex:3];   // 截取到哪个位置 =&gt; abc\nNSString *subString2 = [string9 substringFromIndex:3]; // 从哪个位置开始截取 =&gt; de\nNSRange range;\nrange.location = 1;\nrange.length = 3;\nNSString *subString3 = [string9 substringWithRange:range];\nNSLog(@&quot;%@&quot;, subString3);\n\n/**\n * 字符串的拼接\n */\nNSString *string16 = @&quot;abc&quot;;\nNSString *string17 = @&quot;xyz&quot;;\n\nNSString *addString1 = [[NSString alloc] initWithFormat:@&quot;%@%@&quot;, string16, string17];\nNSString *addString2 = [string16 stringByAppendingFormat:@&quot;%@&quot;, string17];\nNSString *addString3 = [string16 stringByAppendingString:string17];\nNSLog(@&quot;%@&quot;, addString1);\nNSLog(@&quot;%@&quot;, addString2);\nNSLog(@&quot;%@&quot;, addString3);\n\n/**\n * 查找字符串\n */\nNSString *link = @&quot;abcdefgtargetxyz&quot;;\nNSRange range1 = [link rangeOfString:@&quot;target&quot;];\nNSLog(@&quot;%@&quot;, NSStringFromRange(range1));\nif(range1.location != NSNotFound) {\n    NSLog(@&quot;founded&quot;);\n}\n\n/**\n * 可变字符串\n */\n\n// 插入\nNSMutableString *mutableString1 = [[NSMutableString alloc] initWithFormat:@&quot;abc&quot;];\n[mutableString1 insertString:@&quot;..xyz..&quot; atIndex:1];\nNSLog(@&quot;%@&quot;, mutableString1);\n\n// 替换\n[mutableString1 replaceCharactersInRange:NSMakeRange(1, 2) withString:@&quot;efg&quot;];\nNSLog(@&quot;%@&quot;, mutableString1);\n\n// 删除\n[mutableString1 deleteCharactersInRange:NSMakeRange(0, 3)];\nNSLog(@&quot;%@&quot;, mutableString1);\n</code></pre>"},{"title":"NSSet和NSMutableSet","_content":"\n### NSSet\n  \n    // 集合的创建\n    NSSet *set1 = [NSSet setWithObjects:@\"1\",@\"2\", nil];\n    NSSet *set2 = [[NSSet alloc] initWithObjects:@\"2\",@\"3\",@\"4\",@\"5\", nil];\n    NSArray *array1 = [NSArray arrayWithObjects:@\"7\",@\"8\", @\"10\",@\"11\", nil];\n    NSSet *set3 = [NSSet setWithArray:array1];\n    NSSet *set4 = [NSSet setWithSet:set2];\n    NSLog(@\"set1: %@\", set1);\n    NSLog(@\"set2: %@\", set2);\n    NSLog(@\"set3: %@\", set3);\n    NSLog(@\"set4: %@\", set4);\n    \n    // 集合中元素的个数\n    int count = [set2 count];\n    NSLog(@\"%d\", count);\n    \n    // 将集合返回一个数组\n    NSArray *objects = [set1 allObjects];\n    NSLog(@\"objects : %@\", objects);\n    \n    // 获取集合中任意一个对象\n    id object = [set2 anyObject];\n    NSLog(@\"%@\", object);\n    \n    // 集合是否包含某个元素\n    BOOL isContain = [set2 containsObject:@\"3\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 集合间是否存在交集\n    BOOL isIntersect = [set1 intersectsSet:set2];\n    NSLog(@\"%d\", isIntersect);\n    \n    // 集合是否另一个集合匹配\n    BOOL isEqual = [set1 isEqualToSet:set2];\n    NSLog(@\"%d\", isEqual);\n    \n    // 集合是否是另一个集合的子集\n    BOOL isSub = [set1 isSubsetOfSet:set2];\n    NSLog(@\"%d\", isSub);\n    \n    // 追加新的集合\n    NSSet *set5 = [NSSet setWithObjects:@\"one\", nil];\n    NSSet *appSet1 = [set5 setByAddingObject:@\"two\"];\n    NSLog(@\"%@\", appSet1);\n    \n    NSSet *appSet2 = [set5 setByAddingObjectsFromSet: set1];\n    NSLog(@\"%@\", appSet2);\n    \n    NSSet *appSet3 = [set5 setByAddingObjectsFromArray:array1];\n    NSLog(@\"%@\", appSet3);\n\n### NSMutableSet\n\n    NSMutableSet *set6 = [NSMutableSet setWithObjects:@\"1\", @\"2\", @\"a\" , nil];\n    NSMutableSet *set7 = [NSMutableSet setWithObjects:@\"1\", @\"3\", @\"a\" , nil];\n    \n    // 减去相同的元素\n     [set6 minusSet:set7];\n    \n    // 取得两个集合的交集\n     [set6 intersectSet:set7];\n    \n    // 两个集合的并集\n     [set6 unionSet:set7];\n    \n    // 删除指定的对象\n    [set6 removeObject:@\"2\"];\n    \n    NSLog(@\"set6: %@\", set6);","source":"_posts/NSSet和NSMutableSet.md","raw":"title: \"NSSet和NSMutableSet\"\n---\n\n### NSSet\n  \n    // 集合的创建\n    NSSet *set1 = [NSSet setWithObjects:@\"1\",@\"2\", nil];\n    NSSet *set2 = [[NSSet alloc] initWithObjects:@\"2\",@\"3\",@\"4\",@\"5\", nil];\n    NSArray *array1 = [NSArray arrayWithObjects:@\"7\",@\"8\", @\"10\",@\"11\", nil];\n    NSSet *set3 = [NSSet setWithArray:array1];\n    NSSet *set4 = [NSSet setWithSet:set2];\n    NSLog(@\"set1: %@\", set1);\n    NSLog(@\"set2: %@\", set2);\n    NSLog(@\"set3: %@\", set3);\n    NSLog(@\"set4: %@\", set4);\n    \n    // 集合中元素的个数\n    int count = [set2 count];\n    NSLog(@\"%d\", count);\n    \n    // 将集合返回一个数组\n    NSArray *objects = [set1 allObjects];\n    NSLog(@\"objects : %@\", objects);\n    \n    // 获取集合中任意一个对象\n    id object = [set2 anyObject];\n    NSLog(@\"%@\", object);\n    \n    // 集合是否包含某个元素\n    BOOL isContain = [set2 containsObject:@\"3\"];\n    NSLog(@\"%d\", isContain);\n    \n    // 集合间是否存在交集\n    BOOL isIntersect = [set1 intersectsSet:set2];\n    NSLog(@\"%d\", isIntersect);\n    \n    // 集合是否另一个集合匹配\n    BOOL isEqual = [set1 isEqualToSet:set2];\n    NSLog(@\"%d\", isEqual);\n    \n    // 集合是否是另一个集合的子集\n    BOOL isSub = [set1 isSubsetOfSet:set2];\n    NSLog(@\"%d\", isSub);\n    \n    // 追加新的集合\n    NSSet *set5 = [NSSet setWithObjects:@\"one\", nil];\n    NSSet *appSet1 = [set5 setByAddingObject:@\"two\"];\n    NSLog(@\"%@\", appSet1);\n    \n    NSSet *appSet2 = [set5 setByAddingObjectsFromSet: set1];\n    NSLog(@\"%@\", appSet2);\n    \n    NSSet *appSet3 = [set5 setByAddingObjectsFromArray:array1];\n    NSLog(@\"%@\", appSet3);\n\n### NSMutableSet\n\n    NSMutableSet *set6 = [NSMutableSet setWithObjects:@\"1\", @\"2\", @\"a\" , nil];\n    NSMutableSet *set7 = [NSMutableSet setWithObjects:@\"1\", @\"3\", @\"a\" , nil];\n    \n    // 减去相同的元素\n     [set6 minusSet:set7];\n    \n    // 取得两个集合的交集\n     [set6 intersectSet:set7];\n    \n    // 两个集合的并集\n     [set6 unionSet:set7];\n    \n    // 删除指定的对象\n    [set6 removeObject:@\"2\"];\n    \n    NSLog(@\"set6: %@\", set6);","slug":"NSSet和NSMutableSet","published":1,"date":"2016-08-14T07:09:45.751Z","updated":"2016-08-14T07:09:45.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5tn000d18twp485inrn","content":"<h3 id=\"NSSet\"><a href=\"#NSSet\" class=\"headerlink\" title=\"NSSet\"></a>NSSet</h3><pre><code>// 集合的创建\nNSSet *set1 = [NSSet setWithObjects:@&quot;1&quot;,@&quot;2&quot;, nil];\nNSSet *set2 = [[NSSet alloc] initWithObjects:@&quot;2&quot;,@&quot;3&quot;,@&quot;4&quot;,@&quot;5&quot;, nil];\nNSArray *array1 = [NSArray arrayWithObjects:@&quot;7&quot;,@&quot;8&quot;, @&quot;10&quot;,@&quot;11&quot;, nil];\nNSSet *set3 = [NSSet setWithArray:array1];\nNSSet *set4 = [NSSet setWithSet:set2];\nNSLog(@&quot;set1: %@&quot;, set1);\nNSLog(@&quot;set2: %@&quot;, set2);\nNSLog(@&quot;set3: %@&quot;, set3);\nNSLog(@&quot;set4: %@&quot;, set4);\n\n// 集合中元素的个数\nint count = [set2 count];\nNSLog(@&quot;%d&quot;, count);\n\n// 将集合返回一个数组\nNSArray *objects = [set1 allObjects];\nNSLog(@&quot;objects : %@&quot;, objects);\n\n// 获取集合中任意一个对象\nid object = [set2 anyObject];\nNSLog(@&quot;%@&quot;, object);\n\n// 集合是否包含某个元素\nBOOL isContain = [set2 containsObject:@&quot;3&quot;];\nNSLog(@&quot;%d&quot;, isContain);\n\n// 集合间是否存在交集\nBOOL isIntersect = [set1 intersectsSet:set2];\nNSLog(@&quot;%d&quot;, isIntersect);\n\n// 集合是否另一个集合匹配\nBOOL isEqual = [set1 isEqualToSet:set2];\nNSLog(@&quot;%d&quot;, isEqual);\n\n// 集合是否是另一个集合的子集\nBOOL isSub = [set1 isSubsetOfSet:set2];\nNSLog(@&quot;%d&quot;, isSub);\n\n// 追加新的集合\nNSSet *set5 = [NSSet setWithObjects:@&quot;one&quot;, nil];\nNSSet *appSet1 = [set5 setByAddingObject:@&quot;two&quot;];\nNSLog(@&quot;%@&quot;, appSet1);\n\nNSSet *appSet2 = [set5 setByAddingObjectsFromSet: set1];\nNSLog(@&quot;%@&quot;, appSet2);\n\nNSSet *appSet3 = [set5 setByAddingObjectsFromArray:array1];\nNSLog(@&quot;%@&quot;, appSet3);\n</code></pre><h3 id=\"NSMutableSet\"><a href=\"#NSMutableSet\" class=\"headerlink\" title=\"NSMutableSet\"></a>NSMutableSet</h3><pre><code>NSMutableSet *set6 = [NSMutableSet setWithObjects:@&quot;1&quot;, @&quot;2&quot;, @&quot;a&quot; , nil];\nNSMutableSet *set7 = [NSMutableSet setWithObjects:@&quot;1&quot;, @&quot;3&quot;, @&quot;a&quot; , nil];\n\n// 减去相同的元素\n [set6 minusSet:set7];\n\n// 取得两个集合的交集\n [set6 intersectSet:set7];\n\n// 两个集合的并集\n [set6 unionSet:set7];\n\n// 删除指定的对象\n[set6 removeObject:@&quot;2&quot;];\n\nNSLog(@&quot;set6: %@&quot;, set6);\n</code></pre>","excerpt":"","more":"<h3 id=\"NSSet\"><a href=\"#NSSet\" class=\"headerlink\" title=\"NSSet\"></a>NSSet</h3><pre><code>// 集合的创建\nNSSet *set1 = [NSSet setWithObjects:@&quot;1&quot;,@&quot;2&quot;, nil];\nNSSet *set2 = [[NSSet alloc] initWithObjects:@&quot;2&quot;,@&quot;3&quot;,@&quot;4&quot;,@&quot;5&quot;, nil];\nNSArray *array1 = [NSArray arrayWithObjects:@&quot;7&quot;,@&quot;8&quot;, @&quot;10&quot;,@&quot;11&quot;, nil];\nNSSet *set3 = [NSSet setWithArray:array1];\nNSSet *set4 = [NSSet setWithSet:set2];\nNSLog(@&quot;set1: %@&quot;, set1);\nNSLog(@&quot;set2: %@&quot;, set2);\nNSLog(@&quot;set3: %@&quot;, set3);\nNSLog(@&quot;set4: %@&quot;, set4);\n\n// 集合中元素的个数\nint count = [set2 count];\nNSLog(@&quot;%d&quot;, count);\n\n// 将集合返回一个数组\nNSArray *objects = [set1 allObjects];\nNSLog(@&quot;objects : %@&quot;, objects);\n\n// 获取集合中任意一个对象\nid object = [set2 anyObject];\nNSLog(@&quot;%@&quot;, object);\n\n// 集合是否包含某个元素\nBOOL isContain = [set2 containsObject:@&quot;3&quot;];\nNSLog(@&quot;%d&quot;, isContain);\n\n// 集合间是否存在交集\nBOOL isIntersect = [set1 intersectsSet:set2];\nNSLog(@&quot;%d&quot;, isIntersect);\n\n// 集合是否另一个集合匹配\nBOOL isEqual = [set1 isEqualToSet:set2];\nNSLog(@&quot;%d&quot;, isEqual);\n\n// 集合是否是另一个集合的子集\nBOOL isSub = [set1 isSubsetOfSet:set2];\nNSLog(@&quot;%d&quot;, isSub);\n\n// 追加新的集合\nNSSet *set5 = [NSSet setWithObjects:@&quot;one&quot;, nil];\nNSSet *appSet1 = [set5 setByAddingObject:@&quot;two&quot;];\nNSLog(@&quot;%@&quot;, appSet1);\n\nNSSet *appSet2 = [set5 setByAddingObjectsFromSet: set1];\nNSLog(@&quot;%@&quot;, appSet2);\n\nNSSet *appSet3 = [set5 setByAddingObjectsFromArray:array1];\nNSLog(@&quot;%@&quot;, appSet3);\n</code></pre><h3 id=\"NSMutableSet\"><a href=\"#NSMutableSet\" class=\"headerlink\" title=\"NSMutableSet\"></a>NSMutableSet</h3><pre><code>NSMutableSet *set6 = [NSMutableSet setWithObjects:@&quot;1&quot;, @&quot;2&quot;, @&quot;a&quot; , nil];\nNSMutableSet *set7 = [NSMutableSet setWithObjects:@&quot;1&quot;, @&quot;3&quot;, @&quot;a&quot; , nil];\n\n// 减去相同的元素\n [set6 minusSet:set7];\n\n// 取得两个集合的交集\n [set6 intersectSet:set7];\n\n// 两个集合的并集\n [set6 unionSet:set7];\n\n// 删除指定的对象\n[set6 removeObject:@&quot;2&quot;];\n\nNSLog(@&quot;set6: %@&quot;, set6);\n</code></pre>"},{"title":"break continue","date":"2015-09-02T02:45:09.000Z","_content":"* break 跳出剩余循环\n\n\n    var array = [3, 4, 5, 6, 7, 8, 9]\n    for (index, value) in enumerate(array) {\n      if value % 5 == 0 {\n        println(index)\n        break\n      }\n    }\n\n\n* continue 跳出本次循环\n\n\n    var array = [3, 4, 5, 6, 7, 8, 9]\n    for (index, value) in enumerate(array) {\n      if value % 2 != 0 {\n        println(index)\n        continue\n      }\n    }","source":"_posts/break-continue.md","raw":"title: \"break continue\"\ndate: 2015-09-02 10:45:09\ntags: swift, break, continue\ncategories: swift\n---\n* break 跳出剩余循环\n\n\n    var array = [3, 4, 5, 6, 7, 8, 9]\n    for (index, value) in enumerate(array) {\n      if value % 5 == 0 {\n        println(index)\n        break\n      }\n    }\n\n\n* continue 跳出本次循环\n\n\n    var array = [3, 4, 5, 6, 7, 8, 9]\n    for (index, value) in enumerate(array) {\n      if value % 2 != 0 {\n        println(index)\n        continue\n      }\n    }","slug":"break-continue","published":1,"updated":"2016-08-14T07:09:45.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5to000g18tww13qxhoi","content":"<ul>\n<li>break 跳出剩余循环</li>\n</ul>\n<pre><code>var array = [3, 4, 5, 6, 7, 8, 9]\nfor (index, value) in enumerate(array) {\n  if value % 5 == 0 {\n    println(index)\n    break\n  }\n}\n</code></pre><ul>\n<li>continue 跳出本次循环</li>\n</ul>\n<pre><code>var array = [3, 4, 5, 6, 7, 8, 9]\nfor (index, value) in enumerate(array) {\n  if value % 2 != 0 {\n    println(index)\n    continue\n  }\n}\n</code></pre>","excerpt":"","more":"<ul>\n<li>break 跳出剩余循环</li>\n</ul>\n<pre><code>var array = [3, 4, 5, 6, 7, 8, 9]\nfor (index, value) in enumerate(array) {\n  if value % 5 == 0 {\n    println(index)\n    break\n  }\n}\n</code></pre><ul>\n<li>continue 跳出本次循环</li>\n</ul>\n<pre><code>var array = [3, 4, 5, 6, 7, 8, 9]\nfor (index, value) in enumerate(array) {\n  if value % 2 != 0 {\n    println(index)\n    continue\n  }\n}\n</code></pre>"},{"title":"eslint 配置","date":"2016-07-31T09:38:23.000Z","_content":"\n#### 安装eslint包\n*   通过npm安装\n        \n        npm i eslint --save-dev\n\n\n*   安装完成后通过下面命令生成配置文件\n        \n        eslint --init\n\n#### 使用eslint规则\n*   使用<code>.eslintrc</code>文件,配置文件中的<code>\"extends\": \"eslint:recommended\"</code>表示使用默认的规则进行校验，如果自定义规则需要将此设置去掉！\n\n        // .eslintrc配置示例\n        {\n            \"env\": {\n                \"browser\": true,\n            },\n            \"parserOptions\": {\n                \"ecmaVersion\": 6,\n                \"ecmaFeatures\": {\n                \"jsx\": true\n                }\n            },\n            \"globals\": {\n                \"angular\": true,\n            },\n            \"rules\": {\n                \"camelcase\": 2,\n                \"curly\": 2,\n                \"brace-style\": [2, \"1tbs\"],\n                \"quotes\": [2, \"single\"],\n                \"semi\": [2, \"always\"],\n                \"space-in-brackets\": [2, \"never\"],\n                \"space-infix-ops\": 2,\n            }\n        }\n        // 0-不验证；1-警告；2-错误\n\n*   <code>.eslintrc</code>放在项目根目录，则会应用到整个项目；如果子目录中也包含<code>.eslintrc</code>文件，则子目录会忽略根目录的配置文件，应用该目录中的配置文件。这样可以方便地对不同环境的代码应用不同的规则。\n*   在<code>package.json</code>中添加<code>eslintConfig</code>配置块\n    \n        // package.json 配置示例\n        {\n            \"name\": \"mypackage\",\n            \"version\": \"0.0.1\",\n            \"eslintConfig\": {\n                \"env\": {\n                \"browser\": true,\n                \"node\": true\n                }\n            }\n        }\n*   直接在代码文件中定义\n\n        // 文件中关闭验证\n        /*eslint-disable */\n        //suppress all warnings between comments\n        alert('foo');\n        /*eslint-enable */\n\n        // 文件中指定规则不验证\n        /*eslint-disable no-alert */\n        //suppress all warnings between comments\n        alert('foo');\n        /*eslint-enable no-alert */\n\n        // 调整规则\n        /* eslint no-comma-dangle:1 */\n        // Make this just a warning, not an error\n        var obj = { key: 'value', }\n\n*   一些规则\n\n        \"no-alert\": 0,//禁止使用alert confirm prompt\n        \"no-array-constructor\": 2,//禁止使用数组构造器\n        \"no-bitwise\": 0,//禁止使用按位运算符\n        \"no-caller\": 1,//禁止使用arguments.caller或arguments.callee\n        \"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名\n        \"no-class-assign\": 2,//禁止给类赋值\n        \"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句\n        \"no-console\": 2,//禁止使用console\n        \"no-const-assign\": 2,//禁止修改const声明的变量\n        \"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1)\n        \"no-continue\": 0,//禁止使用continue\n        \"no-control-regex\": 2,//禁止在正则表达式中使用控制字符\n        \"no-debugger\": 2,//禁止使用debugger\n        \"no-delete-var\": 2,//不能对var声明的变量使用delete操作符\n        \"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/\n        \"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n        \"no-dupe-args\": 2,//函数参数不能重复\n        \"no-duplicate-case\": 2,//switch中的case标签不能重复\n        \"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句\n        \"no-empty\": 2,//块语句中的内容不能为空\n        \"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空\n        \"no-empty-label\": 2,//禁止使用空label\n        \"no-eq-null\": 2,//禁止对null使用==或!=运算符\n        \"no-eval\": 1,//禁止使用eval\n        \"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值\n        \"no-extend-native\": 2,//禁止扩展native对象\n        \"no-extra-bind\": 2,//禁止不必要的函数绑定\n        \"no-extra-boolean-cast\": 2,//禁止不必要的bool转换\n        \"no-extra-parens\": 2,//禁止非必要的括号\n        \"no-extra-semi\": 2,//禁止多余的冒号\n        \"no-fallthrough\": 1,//禁止switch穿透\n        \"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3.\n        \"no-func-assign\": 2,//禁止重复的函数声明\n        \"no-implicit-coercion\": 1,//禁止隐式转换\n        \"no-implied-eval\": 2,//禁止使用隐式eval\n        \"no-inline-comments\": 0,//禁止行内备注\n        \"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数）\n        \"no-invalid-regexp\": 2,//禁止无效的正则表达式\n        \"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量\n        \"no-irregular-whitespace\": 2,//不能有不规则的空格\n        \"no-iterator\": 2,//禁止使用__iterator__ 属性\n        \"no-label-var\": 2,//label名不能与var声明的变量名相同\n        \"no-labels\": 2,//禁止标签声明\n        \"no-lone-blocks\": 2,//禁止不必要的嵌套块\n        \"no-lonely-if\": 2,//禁止else语句内只有if语句\n        \"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n        \"no-mixed-requires\": [0, false],//声明时不能混用声明类型\n        \"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格\n        \"linebreak-style\": [0, \"windows\"],//换行风格\n        \"no-multi-spaces\": 1,//不能用多余的空格\n        \"no-multi-str\": 2,//字符串不能用\\换行\n        \"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行\n        \"no-native-reassign\": 2,//不能重写native对象\n        \"no-negated-in-lhs\": 2,//in 操作符的左边不能有!\n        \"no-nested-ternary\": 0,//禁止使用嵌套的三目运算\n        \"no-new\": 1,//禁止在使用new构造一个实例后不赋值\n        \"no-new-func\": 1,//禁止使用new Function\n        \"no-new-object\": 2,//禁止使用new Object()\n        \"no-new-require\": 2,//禁止使用new require\n        \"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number\n        \"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON()\n        \"no-octal\": 2,//禁止使用八进制数字\n        \"no-octal-escape\": 2,//禁止使用八进制转义序列\n        \"no-param-reassign\": 2,//禁止给参数重新赋值\n        \"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接\n        \"no-plusplus\": 0,//禁止使用++，--\n        \"no-process-env\": 0,//禁止使用process.env\n        \"no-process-exit\": 0,//禁止使用process.exit()\n        \"no-proto\": 2,//禁止使用__proto__属性\n        \"no-redeclare\": 2,//禁止重复声明变量\n        \"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n        \"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错\n        \"no-return-assign\": 1,//return 语句中不能有赋值表达式\n        \"no-script-url\": 0,//禁止使用javascript:void(0)\n        \"no-self-compare\": 2,//不能比较自身\n        \"no-sequences\": 0,//禁止使用逗号运算符\n        \"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n        \"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n        \"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格\n        \"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2]\n        \"no-sync\": 0,//nodejs 禁止同步方法\n        \"no-ternary\": 0,//禁止使用三目运算符\n        \"no-trailing-spaces\": 1,//一行结束后面不要有空格\n        \"no-this-before-super\": 0,//在调用super()之前不能使用this或super\n        \"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\";\n        \"no-undef\": 1,//不能有未定义的变量\n        \"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined\n        \"no-undefined\": 2,//不能使用undefined\n        \"no-unexpected-multiline\": 2,//避免多行表达式\n        \"no-underscore-dangle\": 1,//标识符不能以_开头或结尾\n        \"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n        \"no-unreachable\": 2,//不能有无法执行的代码\n        \"no-unused-expressions\": 2,//禁止无用的表达式\n        \"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数\n        \"no-use-before-define\": 2,//未定义前不能使用\n        \"no-useless-call\": 2,//禁止不必要的call和apply\n        \"no-void\": 2,//禁用void操作符\n        \"no-var\": 0,//禁用var，用let和const代替\n        \"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注\n        \"no-with\": 2,//禁用with\n        \"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格\n        \"arrow-parens\": 0,//箭头函数用小括号括起来\n        \"arrow-spacing\": 0,//=>的前/后括号\n        \"accessor-pairs\": 0,//在对象中使用getter/setter\n        \"block-scoped-var\": 0,//块语句中使用var\n        \"brace-style\": [1, \"1tbs\"],//大括号风格\n        \"callback-return\": 1,//避免多次调用回调什么的\n        \"camelcase\": 2,//强制驼峰法命名\n        \"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号\n        \"comma-spacing\": 0,//逗号前后的空格\n        \"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾\n        \"complexity\": [0, 11],//循环复杂度\n        \"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的\n        \"consistent-return\": 0,//return 后面是否允许省略\n        \"consistent-this\": [2, \"that\"],//this别名\n        \"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super\n        \"curly\": [2, \"all\"],//必须使用 if(){} 中的{}\n        \"default-case\": 2,//switch语句最后必须有default\n        \"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾\n        \"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号\n        \"eol-last\": 0,//文件以单一的换行符结束\n        \"eqeqeq\": 2,//必须使用全等\n        \"func-names\": 0,//函数表达式必须有名字\n        \"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式\n        \"generator-star-spacing\": 0,//生成器函数*的前后空格\n        \"guard-for-in\": 0,//for in循环要用if语句过滤\n        \"handle-callback-err\": 0,//nodejs 处理错误\n        \"id-length\": 0,//变量名长度\n        \"indent\": [2, 4],//缩进风格\n        \"init-declarations\": 0,//声明时必须赋初值\n        \"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格\n        \"lines-around-comment\": 0,//行前/行后备注\n        \"max-depth\": [0, 4],//嵌套块深度\n        \"max-len\": [0, 80, 4],//字符串最大长度\n        \"max-nested-callbacks\": [0, 2],//回调嵌套深度\n        \"max-params\": [0, 3],//函数最多只能有3个参数\n        \"max-statements\": [0, 10],//函数内最多有几个声明\n        \"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n        \"new-parens\": 2,//new时必须加小括号\n        \"newline-after-var\": 2,//变量声明后是否需要空一行\n        \"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格\n        \"object-shorthand\": 0,//强制对象字面量缩写语法\n        \"one-var\": 1,//连续声明\n        \"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的\n        \"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首\n        \"padded-blocks\": 0,//块语句内行首行尾是否要空行\n        \"prefer-const\": 0,//首选const\n        \"prefer-spread\": 0,//首选展开运算\n        \"prefer-reflect\": 0,//首选Reflect的方法\n        \"quotes\": [1, \"single\"],//引号类型 `` \"\" ''\n        \"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号\n        \"radix\": 2,//parseInt必须指定第二个参数\n        \"id-match\": 0,//命名检测\n        \"require-yield\": 0,//生成器函数必须有yield\n        \"semi\": [2, \"always\"],//语句强制分号结尾\n        \"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格\n        \"sort-vars\": 0,//变量声明时排序\n        \"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格\n        \"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格\n        \"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格\n        \"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格\n        \"space-infix-ops\": 0,//中缀操作符周围要不要有空格\n        \"space-return-throw-case\": 2,//return throw case后面要不要加空格\n        \"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格\n        \"spaced-comment\": 0,//注释风格要不要有空格什么的\n        \"strict\": 2,//使用严格模式\n        \"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN()\n        \"valid-jsdoc\": 0,//jsdoc规则\n        \"valid-typeof\": 2,//必须使用合法的typeof的值\n        \"vars-on-top\": 2,//var必须放在作用域顶部\n        \"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格\n        \"wrap-regex\": 0,//正则表达式字面量用小括号包起来\n        \"yoda\": [2, \"never\"]//禁止尤达条件\n\n#### visual studio code配置eslint\n*   直接安装ESLint扩展\n*   配置<code>.eslintrc</code>文件\n\n#### sublime text配置eslint\n*   在sublime text中安装插件<code>SublimeLinter</code>和<code>SublimeLinter-eslint</code>\n*   配置<code>.eslintrc</code>文件\n\n#### ESLint官网 http://eslint.org/","source":"_posts/eslint-配置.md","raw":"---\ntitle: eslint 配置\ndate: 2016-07-31 17:38:23\ntags: eslint\ncategories: javascript\n---\n\n#### 安装eslint包\n*   通过npm安装\n        \n        npm i eslint --save-dev\n\n\n*   安装完成后通过下面命令生成配置文件\n        \n        eslint --init\n\n#### 使用eslint规则\n*   使用<code>.eslintrc</code>文件,配置文件中的<code>\"extends\": \"eslint:recommended\"</code>表示使用默认的规则进行校验，如果自定义规则需要将此设置去掉！\n\n        // .eslintrc配置示例\n        {\n            \"env\": {\n                \"browser\": true,\n            },\n            \"parserOptions\": {\n                \"ecmaVersion\": 6,\n                \"ecmaFeatures\": {\n                \"jsx\": true\n                }\n            },\n            \"globals\": {\n                \"angular\": true,\n            },\n            \"rules\": {\n                \"camelcase\": 2,\n                \"curly\": 2,\n                \"brace-style\": [2, \"1tbs\"],\n                \"quotes\": [2, \"single\"],\n                \"semi\": [2, \"always\"],\n                \"space-in-brackets\": [2, \"never\"],\n                \"space-infix-ops\": 2,\n            }\n        }\n        // 0-不验证；1-警告；2-错误\n\n*   <code>.eslintrc</code>放在项目根目录，则会应用到整个项目；如果子目录中也包含<code>.eslintrc</code>文件，则子目录会忽略根目录的配置文件，应用该目录中的配置文件。这样可以方便地对不同环境的代码应用不同的规则。\n*   在<code>package.json</code>中添加<code>eslintConfig</code>配置块\n    \n        // package.json 配置示例\n        {\n            \"name\": \"mypackage\",\n            \"version\": \"0.0.1\",\n            \"eslintConfig\": {\n                \"env\": {\n                \"browser\": true,\n                \"node\": true\n                }\n            }\n        }\n*   直接在代码文件中定义\n\n        // 文件中关闭验证\n        /*eslint-disable */\n        //suppress all warnings between comments\n        alert('foo');\n        /*eslint-enable */\n\n        // 文件中指定规则不验证\n        /*eslint-disable no-alert */\n        //suppress all warnings between comments\n        alert('foo');\n        /*eslint-enable no-alert */\n\n        // 调整规则\n        /* eslint no-comma-dangle:1 */\n        // Make this just a warning, not an error\n        var obj = { key: 'value', }\n\n*   一些规则\n\n        \"no-alert\": 0,//禁止使用alert confirm prompt\n        \"no-array-constructor\": 2,//禁止使用数组构造器\n        \"no-bitwise\": 0,//禁止使用按位运算符\n        \"no-caller\": 1,//禁止使用arguments.caller或arguments.callee\n        \"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名\n        \"no-class-assign\": 2,//禁止给类赋值\n        \"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句\n        \"no-console\": 2,//禁止使用console\n        \"no-const-assign\": 2,//禁止修改const声明的变量\n        \"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1)\n        \"no-continue\": 0,//禁止使用continue\n        \"no-control-regex\": 2,//禁止在正则表达式中使用控制字符\n        \"no-debugger\": 2,//禁止使用debugger\n        \"no-delete-var\": 2,//不能对var声明的变量使用delete操作符\n        \"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/\n        \"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n        \"no-dupe-args\": 2,//函数参数不能重复\n        \"no-duplicate-case\": 2,//switch中的case标签不能重复\n        \"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句\n        \"no-empty\": 2,//块语句中的内容不能为空\n        \"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空\n        \"no-empty-label\": 2,//禁止使用空label\n        \"no-eq-null\": 2,//禁止对null使用==或!=运算符\n        \"no-eval\": 1,//禁止使用eval\n        \"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值\n        \"no-extend-native\": 2,//禁止扩展native对象\n        \"no-extra-bind\": 2,//禁止不必要的函数绑定\n        \"no-extra-boolean-cast\": 2,//禁止不必要的bool转换\n        \"no-extra-parens\": 2,//禁止非必要的括号\n        \"no-extra-semi\": 2,//禁止多余的冒号\n        \"no-fallthrough\": 1,//禁止switch穿透\n        \"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3.\n        \"no-func-assign\": 2,//禁止重复的函数声明\n        \"no-implicit-coercion\": 1,//禁止隐式转换\n        \"no-implied-eval\": 2,//禁止使用隐式eval\n        \"no-inline-comments\": 0,//禁止行内备注\n        \"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数）\n        \"no-invalid-regexp\": 2,//禁止无效的正则表达式\n        \"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量\n        \"no-irregular-whitespace\": 2,//不能有不规则的空格\n        \"no-iterator\": 2,//禁止使用__iterator__ 属性\n        \"no-label-var\": 2,//label名不能与var声明的变量名相同\n        \"no-labels\": 2,//禁止标签声明\n        \"no-lone-blocks\": 2,//禁止不必要的嵌套块\n        \"no-lonely-if\": 2,//禁止else语句内只有if语句\n        \"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n        \"no-mixed-requires\": [0, false],//声明时不能混用声明类型\n        \"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格\n        \"linebreak-style\": [0, \"windows\"],//换行风格\n        \"no-multi-spaces\": 1,//不能用多余的空格\n        \"no-multi-str\": 2,//字符串不能用\\换行\n        \"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行\n        \"no-native-reassign\": 2,//不能重写native对象\n        \"no-negated-in-lhs\": 2,//in 操作符的左边不能有!\n        \"no-nested-ternary\": 0,//禁止使用嵌套的三目运算\n        \"no-new\": 1,//禁止在使用new构造一个实例后不赋值\n        \"no-new-func\": 1,//禁止使用new Function\n        \"no-new-object\": 2,//禁止使用new Object()\n        \"no-new-require\": 2,//禁止使用new require\n        \"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number\n        \"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON()\n        \"no-octal\": 2,//禁止使用八进制数字\n        \"no-octal-escape\": 2,//禁止使用八进制转义序列\n        \"no-param-reassign\": 2,//禁止给参数重新赋值\n        \"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接\n        \"no-plusplus\": 0,//禁止使用++，--\n        \"no-process-env\": 0,//禁止使用process.env\n        \"no-process-exit\": 0,//禁止使用process.exit()\n        \"no-proto\": 2,//禁止使用__proto__属性\n        \"no-redeclare\": 2,//禁止重复声明变量\n        \"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n        \"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错\n        \"no-return-assign\": 1,//return 语句中不能有赋值表达式\n        \"no-script-url\": 0,//禁止使用javascript:void(0)\n        \"no-self-compare\": 2,//不能比较自身\n        \"no-sequences\": 0,//禁止使用逗号运算符\n        \"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n        \"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n        \"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格\n        \"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2]\n        \"no-sync\": 0,//nodejs 禁止同步方法\n        \"no-ternary\": 0,//禁止使用三目运算符\n        \"no-trailing-spaces\": 1,//一行结束后面不要有空格\n        \"no-this-before-super\": 0,//在调用super()之前不能使用this或super\n        \"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\";\n        \"no-undef\": 1,//不能有未定义的变量\n        \"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined\n        \"no-undefined\": 2,//不能使用undefined\n        \"no-unexpected-multiline\": 2,//避免多行表达式\n        \"no-underscore-dangle\": 1,//标识符不能以_开头或结尾\n        \"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n        \"no-unreachable\": 2,//不能有无法执行的代码\n        \"no-unused-expressions\": 2,//禁止无用的表达式\n        \"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数\n        \"no-use-before-define\": 2,//未定义前不能使用\n        \"no-useless-call\": 2,//禁止不必要的call和apply\n        \"no-void\": 2,//禁用void操作符\n        \"no-var\": 0,//禁用var，用let和const代替\n        \"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注\n        \"no-with\": 2,//禁用with\n        \"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格\n        \"arrow-parens\": 0,//箭头函数用小括号括起来\n        \"arrow-spacing\": 0,//=>的前/后括号\n        \"accessor-pairs\": 0,//在对象中使用getter/setter\n        \"block-scoped-var\": 0,//块语句中使用var\n        \"brace-style\": [1, \"1tbs\"],//大括号风格\n        \"callback-return\": 1,//避免多次调用回调什么的\n        \"camelcase\": 2,//强制驼峰法命名\n        \"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号\n        \"comma-spacing\": 0,//逗号前后的空格\n        \"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾\n        \"complexity\": [0, 11],//循环复杂度\n        \"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的\n        \"consistent-return\": 0,//return 后面是否允许省略\n        \"consistent-this\": [2, \"that\"],//this别名\n        \"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super\n        \"curly\": [2, \"all\"],//必须使用 if(){} 中的{}\n        \"default-case\": 2,//switch语句最后必须有default\n        \"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾\n        \"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号\n        \"eol-last\": 0,//文件以单一的换行符结束\n        \"eqeqeq\": 2,//必须使用全等\n        \"func-names\": 0,//函数表达式必须有名字\n        \"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式\n        \"generator-star-spacing\": 0,//生成器函数*的前后空格\n        \"guard-for-in\": 0,//for in循环要用if语句过滤\n        \"handle-callback-err\": 0,//nodejs 处理错误\n        \"id-length\": 0,//变量名长度\n        \"indent\": [2, 4],//缩进风格\n        \"init-declarations\": 0,//声明时必须赋初值\n        \"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格\n        \"lines-around-comment\": 0,//行前/行后备注\n        \"max-depth\": [0, 4],//嵌套块深度\n        \"max-len\": [0, 80, 4],//字符串最大长度\n        \"max-nested-callbacks\": [0, 2],//回调嵌套深度\n        \"max-params\": [0, 3],//函数最多只能有3个参数\n        \"max-statements\": [0, 10],//函数内最多有几个声明\n        \"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n        \"new-parens\": 2,//new时必须加小括号\n        \"newline-after-var\": 2,//变量声明后是否需要空一行\n        \"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格\n        \"object-shorthand\": 0,//强制对象字面量缩写语法\n        \"one-var\": 1,//连续声明\n        \"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的\n        \"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首\n        \"padded-blocks\": 0,//块语句内行首行尾是否要空行\n        \"prefer-const\": 0,//首选const\n        \"prefer-spread\": 0,//首选展开运算\n        \"prefer-reflect\": 0,//首选Reflect的方法\n        \"quotes\": [1, \"single\"],//引号类型 `` \"\" ''\n        \"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号\n        \"radix\": 2,//parseInt必须指定第二个参数\n        \"id-match\": 0,//命名检测\n        \"require-yield\": 0,//生成器函数必须有yield\n        \"semi\": [2, \"always\"],//语句强制分号结尾\n        \"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格\n        \"sort-vars\": 0,//变量声明时排序\n        \"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格\n        \"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格\n        \"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格\n        \"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格\n        \"space-infix-ops\": 0,//中缀操作符周围要不要有空格\n        \"space-return-throw-case\": 2,//return throw case后面要不要加空格\n        \"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格\n        \"spaced-comment\": 0,//注释风格要不要有空格什么的\n        \"strict\": 2,//使用严格模式\n        \"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN()\n        \"valid-jsdoc\": 0,//jsdoc规则\n        \"valid-typeof\": 2,//必须使用合法的typeof的值\n        \"vars-on-top\": 2,//var必须放在作用域顶部\n        \"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格\n        \"wrap-regex\": 0,//正则表达式字面量用小括号包起来\n        \"yoda\": [2, \"never\"]//禁止尤达条件\n\n#### visual studio code配置eslint\n*   直接安装ESLint扩展\n*   配置<code>.eslintrc</code>文件\n\n#### sublime text配置eslint\n*   在sublime text中安装插件<code>SublimeLinter</code>和<code>SublimeLinter-eslint</code>\n*   配置<code>.eslintrc</code>文件\n\n#### ESLint官网 http://eslint.org/","slug":"eslint-配置","published":1,"updated":"2016-08-14T07:09:45.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5tt000i18twty5ewu80","content":"<h4 id=\"安装eslint包\"><a href=\"#安装eslint包\" class=\"headerlink\" title=\"安装eslint包\"></a>安装eslint包</h4><ul>\n<li><p>通过npm安装</p>\n<pre><code>npm i eslint --save-dev\n</code></pre></li>\n</ul>\n<ul>\n<li><p>安装完成后通过下面命令生成配置文件</p>\n<pre><code>eslint --init\n</code></pre></li>\n</ul>\n<h4 id=\"使用eslint规则\"><a href=\"#使用eslint规则\" class=\"headerlink\" title=\"使用eslint规则\"></a>使用eslint规则</h4><ul>\n<li><p>使用<code>.eslintrc</code>文件,配置文件中的<code>“extends”: “eslint:recommended”</code>表示使用默认的规则进行校验，如果自定义规则需要将此设置去掉！</p>\n<pre><code>// .eslintrc配置示例\n{\n    &quot;env&quot;: {\n        &quot;browser&quot;: true,\n    },\n    &quot;parserOptions&quot;: {\n        &quot;ecmaVersion&quot;: 6,\n        &quot;ecmaFeatures&quot;: {\n        &quot;jsx&quot;: true\n        }\n    },\n    &quot;globals&quot;: {\n        &quot;angular&quot;: true,\n    },\n    &quot;rules&quot;: {\n        &quot;camelcase&quot;: 2,\n        &quot;curly&quot;: 2,\n        &quot;brace-style&quot;: [2, &quot;1tbs&quot;],\n        &quot;quotes&quot;: [2, &quot;single&quot;],\n        &quot;semi&quot;: [2, &quot;always&quot;],\n        &quot;space-in-brackets&quot;: [2, &quot;never&quot;],\n        &quot;space-infix-ops&quot;: 2,\n    }\n}\n// 0-不验证；1-警告；2-错误\n</code></pre></li>\n<li><p><code>.eslintrc</code>放在项目根目录，则会应用到整个项目；如果子目录中也包含<code>.eslintrc</code>文件，则子目录会忽略根目录的配置文件，应用该目录中的配置文件。这样可以方便地对不同环境的代码应用不同的规则。</p>\n</li>\n<li><p>在<code>package.json</code>中添加<code>eslintConfig</code>配置块</p>\n<pre><code>// package.json 配置示例\n{\n    &quot;name&quot;: &quot;mypackage&quot;,\n    &quot;version&quot;: &quot;0.0.1&quot;,\n    &quot;eslintConfig&quot;: {\n        &quot;env&quot;: {\n        &quot;browser&quot;: true,\n        &quot;node&quot;: true\n        }\n    }\n}\n</code></pre></li>\n<li><p>直接在代码文件中定义</p>\n<pre><code>// 文件中关闭验证\n/*eslint-disable */\n//suppress all warnings between comments\nalert(&apos;foo&apos;);\n/*eslint-enable */\n\n// 文件中指定规则不验证\n/*eslint-disable no-alert */\n//suppress all warnings between comments\nalert(&apos;foo&apos;);\n/*eslint-enable no-alert */\n\n// 调整规则\n/* eslint no-comma-dangle:1 */\n// Make this just a warning, not an error\nvar obj = { key: &apos;value&apos;, }\n</code></pre></li>\n<li><p>一些规则</p>\n<pre><code>&quot;no-alert&quot;: 0,//禁止使用alert confirm prompt\n&quot;no-array-constructor&quot;: 2,//禁止使用数组构造器\n&quot;no-bitwise&quot;: 0,//禁止使用按位运算符\n&quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee\n&quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名\n&quot;no-class-assign&quot;: 2,//禁止给类赋值\n&quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句\n&quot;no-console&quot;: 2,//禁止使用console\n&quot;no-const-assign&quot;: 2,//禁止修改const声明的变量\n&quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1)\n&quot;no-continue&quot;: 0,//禁止使用continue\n&quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符\n&quot;no-debugger&quot;: 2,//禁止使用debugger\n&quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符\n&quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/\n&quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n&quot;no-dupe-args&quot;: 2,//函数参数不能重复\n&quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复\n&quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句\n&quot;no-empty&quot;: 2,//块语句中的内容不能为空\n&quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空\n&quot;no-empty-label&quot;: 2,//禁止使用空label\n&quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符\n&quot;no-eval&quot;: 1,//禁止使用eval\n&quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值\n&quot;no-extend-native&quot;: 2,//禁止扩展native对象\n&quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定\n&quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换\n&quot;no-extra-parens&quot;: 2,//禁止非必要的括号\n&quot;no-extra-semi&quot;: 2,//禁止多余的冒号\n&quot;no-fallthrough&quot;: 1,//禁止switch穿透\n&quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3.\n&quot;no-func-assign&quot;: 2,//禁止重复的函数声明\n&quot;no-implicit-coercion&quot;: 1,//禁止隐式转换\n&quot;no-implied-eval&quot;: 2,//禁止使用隐式eval\n&quot;no-inline-comments&quot;: 0,//禁止行内备注\n&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数）\n&quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式\n&quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量\n&quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格\n&quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性\n&quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同\n&quot;no-labels&quot;: 2,//禁止标签声明\n&quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块\n&quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句\n&quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n&quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型\n&quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格\n&quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格\n&quot;no-multi-spaces&quot;: 1,//不能用多余的空格\n&quot;no-multi-str&quot;: 2,//字符串不能用\\换行\n&quot;no-multiple-empty-lines&quot;: [1, {&quot;max&quot;: 2}],//空行最多不能超过2行\n&quot;no-native-reassign&quot;: 2,//不能重写native对象\n&quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有!\n&quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算\n&quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值\n&quot;no-new-func&quot;: 1,//禁止使用new Function\n&quot;no-new-object&quot;: 2,//禁止使用new Object()\n&quot;no-new-require&quot;: 2,//禁止使用new require\n&quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number\n&quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON()\n&quot;no-octal&quot;: 2,//禁止使用八进制数字\n&quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列\n&quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值\n&quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接\n&quot;no-plusplus&quot;: 0,//禁止使用++，--\n&quot;no-process-env&quot;: 0,//禁止使用process.env\n&quot;no-process-exit&quot;: 0,//禁止使用process.exit()\n&quot;no-proto&quot;: 2,//禁止使用__proto__属性\n&quot;no-redeclare&quot;: 2,//禁止重复声明变量\n&quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n&quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错\n&quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式\n&quot;no-script-url&quot;: 0,//禁止使用javascript:void(0)\n&quot;no-self-compare&quot;: 2,//不能比较自身\n&quot;no-sequences&quot;: 0,//禁止使用逗号运算符\n&quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n&quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n&quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格\n&quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2]\n&quot;no-sync&quot;: 0,//nodejs 禁止同步方法\n&quot;no-ternary&quot;: 0,//禁止使用三目运算符\n&quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格\n&quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super\n&quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;;\n&quot;no-undef&quot;: 1,//不能有未定义的变量\n&quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined\n&quot;no-undefined&quot;: 2,//不能使用undefined\n&quot;no-unexpected-multiline&quot;: 2,//避免多行表达式\n&quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾\n&quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n&quot;no-unreachable&quot;: 2,//不能有无法执行的代码\n&quot;no-unused-expressions&quot;: 2,//禁止无用的表达式\n&quot;no-unused-vars&quot;: [2, {&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;}],//不能有声明后未被使用的变量或参数\n&quot;no-use-before-define&quot;: 2,//未定义前不能使用\n&quot;no-useless-call&quot;: 2,//禁止不必要的call和apply\n&quot;no-void&quot;: 2,//禁用void操作符\n&quot;no-var&quot;: 0,//禁用var，用let和const代替\n&quot;no-warning-comments&quot;: [1, { &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; }],//不能有警告备注\n&quot;no-with&quot;: 2,//禁用with\n&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格\n&quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来\n&quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号\n&quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter\n&quot;block-scoped-var&quot;: 0,//块语句中使用var\n&quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格\n&quot;callback-return&quot;: 1,//避免多次调用回调什么的\n&quot;camelcase&quot;: 2,//强制驼峰法命名\n&quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号\n&quot;comma-spacing&quot;: 0,//逗号前后的空格\n&quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾\n&quot;complexity&quot;: [0, 11],//循环复杂度\n&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的\n&quot;consistent-return&quot;: 0,//return 后面是否允许省略\n&quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名\n&quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super\n&quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if(){} 中的{}\n&quot;default-case&quot;: 2,//switch语句最后必须有default\n&quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾\n&quot;dot-notation&quot;: [0, { &quot;allowKeywords&quot;: true }],//避免不必要的方括号\n&quot;eol-last&quot;: 0,//文件以单一的换行符结束\n&quot;eqeqeq&quot;: 2,//必须使用全等\n&quot;func-names&quot;: 0,//函数表达式必须有名字\n&quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式\n&quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格\n&quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤\n&quot;handle-callback-err&quot;: 0,//nodejs 处理错误\n&quot;id-length&quot;: 0,//变量名长度\n&quot;indent&quot;: [2, 4],//缩进风格\n&quot;init-declarations&quot;: 0,//声明时必须赋初值\n&quot;key-spacing&quot;: [0, { &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true }],//对象字面量中冒号的前后空格\n&quot;lines-around-comment&quot;: 0,//行前/行后备注\n&quot;max-depth&quot;: [0, 4],//嵌套块深度\n&quot;max-len&quot;: [0, 80, 4],//字符串最大长度\n&quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度\n&quot;max-params&quot;: [0, 3],//函数最多只能有3个参数\n&quot;max-statements&quot;: [0, 10],//函数内最多有几个声明\n&quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n&quot;new-parens&quot;: 2,//new时必须加小括号\n&quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行\n&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格\n&quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法\n&quot;one-var&quot;: 1,//连续声明\n&quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的\n&quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首\n&quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行\n&quot;prefer-const&quot;: 0,//首选const\n&quot;prefer-spread&quot;: 0,//首选展开运算\n&quot;prefer-reflect&quot;: 0,//首选Reflect的方法\n&quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &apos;&apos;\n&quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号\n&quot;radix&quot;: 2,//parseInt必须指定第二个参数\n&quot;id-match&quot;: 0,//命名检测\n&quot;require-yield&quot;: 0,//生成器函数必须有yield\n&quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾\n&quot;semi-spacing&quot;: [0, {&quot;before&quot;: false, &quot;after&quot;: true}],//分号前后空格\n&quot;sort-vars&quot;: 0,//变量声明时排序\n&quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格\n&quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块{前面要不要有空格\n&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格\n&quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格\n&quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格\n&quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格\n&quot;space-unary-ops&quot;: [0, { &quot;words&quot;: true, &quot;nonwords&quot;: false }],//一元运算符的前/后要不要加空格\n&quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的\n&quot;strict&quot;: 2,//使用严格模式\n&quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN()\n&quot;valid-jsdoc&quot;: 0,//jsdoc规则\n&quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值\n&quot;vars-on-top&quot;: 2,//var必须放在作用域顶部\n&quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格\n&quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来\n&quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件\n</code></pre></li>\n</ul>\n<h4 id=\"visual-studio-code配置eslint\"><a href=\"#visual-studio-code配置eslint\" class=\"headerlink\" title=\"visual studio code配置eslint\"></a>visual studio code配置eslint</h4><ul>\n<li>直接安装ESLint扩展</li>\n<li>配置<code>.eslintrc</code>文件</li>\n</ul>\n<h4 id=\"sublime-text配置eslint\"><a href=\"#sublime-text配置eslint\" class=\"headerlink\" title=\"sublime text配置eslint\"></a>sublime text配置eslint</h4><ul>\n<li>在sublime text中安装插件<code>SublimeLinter</code>和<code>SublimeLinter-eslint</code></li>\n<li>配置<code>.eslintrc</code>文件</li>\n</ul>\n<h4 id=\"ESLint官网-http-eslint-org\"><a href=\"#ESLint官网-http-eslint-org\" class=\"headerlink\" title=\"ESLint官网 http://eslint.org/\"></a>ESLint官网 <a href=\"http://eslint.org/\" target=\"_blank\" rel=\"external\">http://eslint.org/</a></h4>","excerpt":"","more":"<h4 id=\"安装eslint包\"><a href=\"#安装eslint包\" class=\"headerlink\" title=\"安装eslint包\"></a>安装eslint包</h4><ul>\n<li><p>通过npm安装</p>\n<pre><code>npm i eslint --save-dev\n</code></pre></li>\n</ul>\n<ul>\n<li><p>安装完成后通过下面命令生成配置文件</p>\n<pre><code>eslint --init\n</code></pre></li>\n</ul>\n<h4 id=\"使用eslint规则\"><a href=\"#使用eslint规则\" class=\"headerlink\" title=\"使用eslint规则\"></a>使用eslint规则</h4><ul>\n<li><p>使用<code>.eslintrc</code>文件,配置文件中的<code>“extends”: “eslint:recommended”</code>表示使用默认的规则进行校验，如果自定义规则需要将此设置去掉！</p>\n<pre><code>// .eslintrc配置示例\n{\n    &quot;env&quot;: {\n        &quot;browser&quot;: true,\n    },\n    &quot;parserOptions&quot;: {\n        &quot;ecmaVersion&quot;: 6,\n        &quot;ecmaFeatures&quot;: {\n        &quot;jsx&quot;: true\n        }\n    },\n    &quot;globals&quot;: {\n        &quot;angular&quot;: true,\n    },\n    &quot;rules&quot;: {\n        &quot;camelcase&quot;: 2,\n        &quot;curly&quot;: 2,\n        &quot;brace-style&quot;: [2, &quot;1tbs&quot;],\n        &quot;quotes&quot;: [2, &quot;single&quot;],\n        &quot;semi&quot;: [2, &quot;always&quot;],\n        &quot;space-in-brackets&quot;: [2, &quot;never&quot;],\n        &quot;space-infix-ops&quot;: 2,\n    }\n}\n// 0-不验证；1-警告；2-错误\n</code></pre></li>\n<li><p><code>.eslintrc</code>放在项目根目录，则会应用到整个项目；如果子目录中也包含<code>.eslintrc</code>文件，则子目录会忽略根目录的配置文件，应用该目录中的配置文件。这样可以方便地对不同环境的代码应用不同的规则。</p>\n</li>\n<li><p>在<code>package.json</code>中添加<code>eslintConfig</code>配置块</p>\n<pre><code>// package.json 配置示例\n{\n    &quot;name&quot;: &quot;mypackage&quot;,\n    &quot;version&quot;: &quot;0.0.1&quot;,\n    &quot;eslintConfig&quot;: {\n        &quot;env&quot;: {\n        &quot;browser&quot;: true,\n        &quot;node&quot;: true\n        }\n    }\n}\n</code></pre></li>\n<li><p>直接在代码文件中定义</p>\n<pre><code>// 文件中关闭验证\n/*eslint-disable */\n//suppress all warnings between comments\nalert(&apos;foo&apos;);\n/*eslint-enable */\n\n// 文件中指定规则不验证\n/*eslint-disable no-alert */\n//suppress all warnings between comments\nalert(&apos;foo&apos;);\n/*eslint-enable no-alert */\n\n// 调整规则\n/* eslint no-comma-dangle:1 */\n// Make this just a warning, not an error\nvar obj = { key: &apos;value&apos;, }\n</code></pre></li>\n<li><p>一些规则</p>\n<pre><code>&quot;no-alert&quot;: 0,//禁止使用alert confirm prompt\n&quot;no-array-constructor&quot;: 2,//禁止使用数组构造器\n&quot;no-bitwise&quot;: 0,//禁止使用按位运算符\n&quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee\n&quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名\n&quot;no-class-assign&quot;: 2,//禁止给类赋值\n&quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句\n&quot;no-console&quot;: 2,//禁止使用console\n&quot;no-const-assign&quot;: 2,//禁止修改const声明的变量\n&quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1)\n&quot;no-continue&quot;: 0,//禁止使用continue\n&quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符\n&quot;no-debugger&quot;: 2,//禁止使用debugger\n&quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符\n&quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/\n&quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n&quot;no-dupe-args&quot;: 2,//函数参数不能重复\n&quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复\n&quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句\n&quot;no-empty&quot;: 2,//块语句中的内容不能为空\n&quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空\n&quot;no-empty-label&quot;: 2,//禁止使用空label\n&quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符\n&quot;no-eval&quot;: 1,//禁止使用eval\n&quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值\n&quot;no-extend-native&quot;: 2,//禁止扩展native对象\n&quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定\n&quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换\n&quot;no-extra-parens&quot;: 2,//禁止非必要的括号\n&quot;no-extra-semi&quot;: 2,//禁止多余的冒号\n&quot;no-fallthrough&quot;: 1,//禁止switch穿透\n&quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3.\n&quot;no-func-assign&quot;: 2,//禁止重复的函数声明\n&quot;no-implicit-coercion&quot;: 1,//禁止隐式转换\n&quot;no-implied-eval&quot;: 2,//禁止使用隐式eval\n&quot;no-inline-comments&quot;: 0,//禁止行内备注\n&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数）\n&quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式\n&quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量\n&quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格\n&quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性\n&quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同\n&quot;no-labels&quot;: 2,//禁止标签声明\n&quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块\n&quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句\n&quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n&quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型\n&quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格\n&quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格\n&quot;no-multi-spaces&quot;: 1,//不能用多余的空格\n&quot;no-multi-str&quot;: 2,//字符串不能用\\换行\n&quot;no-multiple-empty-lines&quot;: [1, {&quot;max&quot;: 2}],//空行最多不能超过2行\n&quot;no-native-reassign&quot;: 2,//不能重写native对象\n&quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有!\n&quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算\n&quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值\n&quot;no-new-func&quot;: 1,//禁止使用new Function\n&quot;no-new-object&quot;: 2,//禁止使用new Object()\n&quot;no-new-require&quot;: 2,//禁止使用new require\n&quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number\n&quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON()\n&quot;no-octal&quot;: 2,//禁止使用八进制数字\n&quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列\n&quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值\n&quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接\n&quot;no-plusplus&quot;: 0,//禁止使用++，--\n&quot;no-process-env&quot;: 0,//禁止使用process.env\n&quot;no-process-exit&quot;: 0,//禁止使用process.exit()\n&quot;no-proto&quot;: 2,//禁止使用__proto__属性\n&quot;no-redeclare&quot;: 2,//禁止重复声明变量\n&quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n&quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错\n&quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式\n&quot;no-script-url&quot;: 0,//禁止使用javascript:void(0)\n&quot;no-self-compare&quot;: 2,//不能比较自身\n&quot;no-sequences&quot;: 0,//禁止使用逗号运算符\n&quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n&quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n&quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格\n&quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2]\n&quot;no-sync&quot;: 0,//nodejs 禁止同步方法\n&quot;no-ternary&quot;: 0,//禁止使用三目运算符\n&quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格\n&quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super\n&quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;;\n&quot;no-undef&quot;: 1,//不能有未定义的变量\n&quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined\n&quot;no-undefined&quot;: 2,//不能使用undefined\n&quot;no-unexpected-multiline&quot;: 2,//避免多行表达式\n&quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾\n&quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n&quot;no-unreachable&quot;: 2,//不能有无法执行的代码\n&quot;no-unused-expressions&quot;: 2,//禁止无用的表达式\n&quot;no-unused-vars&quot;: [2, {&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;}],//不能有声明后未被使用的变量或参数\n&quot;no-use-before-define&quot;: 2,//未定义前不能使用\n&quot;no-useless-call&quot;: 2,//禁止不必要的call和apply\n&quot;no-void&quot;: 2,//禁用void操作符\n&quot;no-var&quot;: 0,//禁用var，用let和const代替\n&quot;no-warning-comments&quot;: [1, { &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; }],//不能有警告备注\n&quot;no-with&quot;: 2,//禁用with\n&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格\n&quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来\n&quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号\n&quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter\n&quot;block-scoped-var&quot;: 0,//块语句中使用var\n&quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格\n&quot;callback-return&quot;: 1,//避免多次调用回调什么的\n&quot;camelcase&quot;: 2,//强制驼峰法命名\n&quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号\n&quot;comma-spacing&quot;: 0,//逗号前后的空格\n&quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾\n&quot;complexity&quot;: [0, 11],//循环复杂度\n&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的\n&quot;consistent-return&quot;: 0,//return 后面是否允许省略\n&quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名\n&quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super\n&quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if(){} 中的{}\n&quot;default-case&quot;: 2,//switch语句最后必须有default\n&quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾\n&quot;dot-notation&quot;: [0, { &quot;allowKeywords&quot;: true }],//避免不必要的方括号\n&quot;eol-last&quot;: 0,//文件以单一的换行符结束\n&quot;eqeqeq&quot;: 2,//必须使用全等\n&quot;func-names&quot;: 0,//函数表达式必须有名字\n&quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式\n&quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格\n&quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤\n&quot;handle-callback-err&quot;: 0,//nodejs 处理错误\n&quot;id-length&quot;: 0,//变量名长度\n&quot;indent&quot;: [2, 4],//缩进风格\n&quot;init-declarations&quot;: 0,//声明时必须赋初值\n&quot;key-spacing&quot;: [0, { &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true }],//对象字面量中冒号的前后空格\n&quot;lines-around-comment&quot;: 0,//行前/行后备注\n&quot;max-depth&quot;: [0, 4],//嵌套块深度\n&quot;max-len&quot;: [0, 80, 4],//字符串最大长度\n&quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度\n&quot;max-params&quot;: [0, 3],//函数最多只能有3个参数\n&quot;max-statements&quot;: [0, 10],//函数内最多有几个声明\n&quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n&quot;new-parens&quot;: 2,//new时必须加小括号\n&quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行\n&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格\n&quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法\n&quot;one-var&quot;: 1,//连续声明\n&quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的\n&quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首\n&quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行\n&quot;prefer-const&quot;: 0,//首选const\n&quot;prefer-spread&quot;: 0,//首选展开运算\n&quot;prefer-reflect&quot;: 0,//首选Reflect的方法\n&quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &apos;&apos;\n&quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号\n&quot;radix&quot;: 2,//parseInt必须指定第二个参数\n&quot;id-match&quot;: 0,//命名检测\n&quot;require-yield&quot;: 0,//生成器函数必须有yield\n&quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾\n&quot;semi-spacing&quot;: [0, {&quot;before&quot;: false, &quot;after&quot;: true}],//分号前后空格\n&quot;sort-vars&quot;: 0,//变量声明时排序\n&quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格\n&quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块{前面要不要有空格\n&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格\n&quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格\n&quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格\n&quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格\n&quot;space-unary-ops&quot;: [0, { &quot;words&quot;: true, &quot;nonwords&quot;: false }],//一元运算符的前/后要不要加空格\n&quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的\n&quot;strict&quot;: 2,//使用严格模式\n&quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN()\n&quot;valid-jsdoc&quot;: 0,//jsdoc规则\n&quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值\n&quot;vars-on-top&quot;: 2,//var必须放在作用域顶部\n&quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格\n&quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来\n&quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件\n</code></pre></li>\n</ul>\n<h4 id=\"visual-studio-code配置eslint\"><a href=\"#visual-studio-code配置eslint\" class=\"headerlink\" title=\"visual studio code配置eslint\"></a>visual studio code配置eslint</h4><ul>\n<li>直接安装ESLint扩展</li>\n<li>配置<code>.eslintrc</code>文件</li>\n</ul>\n<h4 id=\"sublime-text配置eslint\"><a href=\"#sublime-text配置eslint\" class=\"headerlink\" title=\"sublime text配置eslint\"></a>sublime text配置eslint</h4><ul>\n<li>在sublime text中安装插件<code>SublimeLinter</code>和<code>SublimeLinter-eslint</code></li>\n<li>配置<code>.eslintrc</code>文件</li>\n</ul>\n<h4 id=\"ESLint官网-http-eslint-org\"><a href=\"#ESLint官网-http-eslint-org\" class=\"headerlink\" title=\"ESLint官网 http://eslint.org/\"></a>ESLint官网 <a href=\"http://eslint.org/\">http://eslint.org/</a></h4>"},{"title":"Hello hexo","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello hexo\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-08-14T07:09:45.782Z","updated":"2016-08-14T07:09:45.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5tx000m18tw4j7r3v22","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"swift Array","date":"2015-09-01T08:48:11.000Z","_content":"    \n    // 定义一个数组\n    var array1 = [2, 3, 4, 5]\n\n    var array2: Array = [2, 3, 4, 5]\n\n    var array3: Array<Int> = [2, 3, 4, 5]\n\n    // 推荐这种写法\n    var array4: [Int] = [2, 3, 4, 5]\n\n    // 数组元素可以有不同的类型\n    var array5: Array<Any> = [1, \"string\", false, 2.3]\n    var array6 = [1, \"string\", false, 2.3]\n\n    // 判断数组是否为空\n    array1.isEmpty //-> false\n\n    // 数组元素的个数\n    array1.count // -> 4\n\n    array1[3]\n\n    // 向数组末尾加入元素\n    array5.append(\"d\")\n    array5 += [6]\n\n    // 向数组任意位置插入元素\n    array1.insert(1, atIndex: 0)\n\n    // 修改数组的元素的值\n    array1[2] = 9\n\n    // 删除数组某个元素\n    array1.removeLast()\n    array1.removeAtIndex(0)\n    // array1.removeAll(是否保持容量)\n\n    // Range\n    var range: Range<Int> = 0..<3                     // -> 1..<3\n    var range2: Range<Int> = Range(start: 0, end: 3)  // -> 1..<3\n    var range3 = 0...2                                // -> 1..<3\n\n    // 数组的批量操作\n    array4[0...2] //批量访问\n    array4[0...1] = [9,9,9,9] // 可以修改任意个数\n    // array4.replaceRange(Range(start: 0, end: 2), with: [9,9,9,9]) // 这个和上面是等价的\n    // array4.replaceRange(Range(0..<2, with: [9,9,9,9])\n    \n    //数组的遍历\n    for elem in array4 {\n      println(elem)\n    }\n\n    // 枚举方法遍历\n    for (index, value) in enumerate(array4) {\n      println(index)\n      println(value)\n    }\n","source":"_posts/swift-Array.md","raw":"title: \"swift Array\"\ndate: 2015-09-01 16:48:11\ntags: swift Array\ncategories: swift\n---\n    \n    // 定义一个数组\n    var array1 = [2, 3, 4, 5]\n\n    var array2: Array = [2, 3, 4, 5]\n\n    var array3: Array<Int> = [2, 3, 4, 5]\n\n    // 推荐这种写法\n    var array4: [Int] = [2, 3, 4, 5]\n\n    // 数组元素可以有不同的类型\n    var array5: Array<Any> = [1, \"string\", false, 2.3]\n    var array6 = [1, \"string\", false, 2.3]\n\n    // 判断数组是否为空\n    array1.isEmpty //-> false\n\n    // 数组元素的个数\n    array1.count // -> 4\n\n    array1[3]\n\n    // 向数组末尾加入元素\n    array5.append(\"d\")\n    array5 += [6]\n\n    // 向数组任意位置插入元素\n    array1.insert(1, atIndex: 0)\n\n    // 修改数组的元素的值\n    array1[2] = 9\n\n    // 删除数组某个元素\n    array1.removeLast()\n    array1.removeAtIndex(0)\n    // array1.removeAll(是否保持容量)\n\n    // Range\n    var range: Range<Int> = 0..<3                     // -> 1..<3\n    var range2: Range<Int> = Range(start: 0, end: 3)  // -> 1..<3\n    var range3 = 0...2                                // -> 1..<3\n\n    // 数组的批量操作\n    array4[0...2] //批量访问\n    array4[0...1] = [9,9,9,9] // 可以修改任意个数\n    // array4.replaceRange(Range(start: 0, end: 2), with: [9,9,9,9]) // 这个和上面是等价的\n    // array4.replaceRange(Range(0..<2, with: [9,9,9,9])\n    \n    //数组的遍历\n    for elem in array4 {\n      println(elem)\n    }\n\n    // 枚举方法遍历\n    for (index, value) in enumerate(array4) {\n      println(index)\n      println(value)\n    }\n","slug":"swift-Array","published":1,"updated":"2016-08-14T07:09:45.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5ty000o18twqkvsiwq6","content":"<pre><code>// 定义一个数组\nvar array1 = [2, 3, 4, 5]\n\nvar array2: Array = [2, 3, 4, 5]\n\nvar array3: Array&lt;Int&gt; = [2, 3, 4, 5]\n\n// 推荐这种写法\nvar array4: [Int] = [2, 3, 4, 5]\n\n// 数组元素可以有不同的类型\nvar array5: Array&lt;Any&gt; = [1, &quot;string&quot;, false, 2.3]\nvar array6 = [1, &quot;string&quot;, false, 2.3]\n\n// 判断数组是否为空\narray1.isEmpty //-&gt; false\n\n// 数组元素的个数\narray1.count // -&gt; 4\n\narray1[3]\n\n// 向数组末尾加入元素\narray5.append(&quot;d&quot;)\narray5 += [6]\n\n// 向数组任意位置插入元素\narray1.insert(1, atIndex: 0)\n\n// 修改数组的元素的值\narray1[2] = 9\n\n// 删除数组某个元素\narray1.removeLast()\narray1.removeAtIndex(0)\n// array1.removeAll(是否保持容量)\n\n// Range\nvar range: Range&lt;Int&gt; = 0..&lt;3                     // -&gt; 1..&lt;3\nvar range2: Range&lt;Int&gt; = Range(start: 0, end: 3)  // -&gt; 1..&lt;3\nvar range3 = 0...2                                // -&gt; 1..&lt;3\n\n// 数组的批量操作\narray4[0...2] //批量访问\narray4[0...1] = [9,9,9,9] // 可以修改任意个数\n// array4.replaceRange(Range(start: 0, end: 2), with: [9,9,9,9]) // 这个和上面是等价的\n// array4.replaceRange(Range(0..&lt;2, with: [9,9,9,9])\n\n//数组的遍历\nfor elem in array4 {\n  println(elem)\n}\n\n// 枚举方法遍历\nfor (index, value) in enumerate(array4) {\n  println(index)\n  println(value)\n}\n</code></pre>","excerpt":"","more":"<pre><code>// 定义一个数组\nvar array1 = [2, 3, 4, 5]\n\nvar array2: Array = [2, 3, 4, 5]\n\nvar array3: Array&lt;Int&gt; = [2, 3, 4, 5]\n\n// 推荐这种写法\nvar array4: [Int] = [2, 3, 4, 5]\n\n// 数组元素可以有不同的类型\nvar array5: Array&lt;Any&gt; = [1, &quot;string&quot;, false, 2.3]\nvar array6 = [1, &quot;string&quot;, false, 2.3]\n\n// 判断数组是否为空\narray1.isEmpty //-&gt; false\n\n// 数组元素的个数\narray1.count // -&gt; 4\n\narray1[3]\n\n// 向数组末尾加入元素\narray5.append(&quot;d&quot;)\narray5 += [6]\n\n// 向数组任意位置插入元素\narray1.insert(1, atIndex: 0)\n\n// 修改数组的元素的值\narray1[2] = 9\n\n// 删除数组某个元素\narray1.removeLast()\narray1.removeAtIndex(0)\n// array1.removeAll(是否保持容量)\n\n// Range\nvar range: Range&lt;Int&gt; = 0..&lt;3                     // -&gt; 1..&lt;3\nvar range2: Range&lt;Int&gt; = Range(start: 0, end: 3)  // -&gt; 1..&lt;3\nvar range3 = 0...2                                // -&gt; 1..&lt;3\n\n// 数组的批量操作\narray4[0...2] //批量访问\narray4[0...1] = [9,9,9,9] // 可以修改任意个数\n// array4.replaceRange(Range(start: 0, end: 2), with: [9,9,9,9]) // 这个和上面是等价的\n// array4.replaceRange(Range(0..&lt;2, with: [9,9,9,9])\n\n//数组的遍历\nfor elem in array4 {\n  println(elem)\n}\n\n// 枚举方法遍历\nfor (index, value) in enumerate(array4) {\n  println(index)\n  println(value)\n}\n</code></pre>"},{"title":"swift Dictionary 字典","date":"2015-09-02T02:38:51.000Z","_content":"  \n    /*\n     *定义一个字典\n     */\n\n    // 完整严格定义一个字典\n    var dict: Dictionary<String,String> = [\"apple\": \"苹果\", \"bag\":\"包\"]\n\n    // 简单定义一个字典\n    var dict2 = [:]\n\n    // 字典元素个数\n    dict.count\n\n    dict[\"apple\"]\n\n    // 更新值\n    dict[\"bag\"] = \"包包\"\n\n    // 更新键 返回nil\n    dict.updateValue(\"大苹果\", forKey: \"apple\")\n\n    // 当键不存在时会添加一个,返回nil\n    dict.updateValue(\"电脑\", forKey: \"computer\")\n\n    // 删除一个键,返回被删除的值\n    dict.removeValueForKey(\"computer\")\n\n    // 删除所有的值\n    //dict.removeAll()\n\n    /*\n     * 遍历字典\n     */\n\n    for (key,value) in dict {\n      println(key)\n      println(value)\n    }\n\n    // 只遍历key\n    for key in dict.keys {\n      println(key)\n    }\n\n    // 只遍历value\n    for value in dict.values {\n      println(value)\n    }","source":"_posts/swift-Dictionary-字典.md","raw":"title: \"swift Dictionary 字典\"\ndate: 2015-09-02 10:38:51\ntags: swift,字典\ncategories: swift\n---\n  \n    /*\n     *定义一个字典\n     */\n\n    // 完整严格定义一个字典\n    var dict: Dictionary<String,String> = [\"apple\": \"苹果\", \"bag\":\"包\"]\n\n    // 简单定义一个字典\n    var dict2 = [:]\n\n    // 字典元素个数\n    dict.count\n\n    dict[\"apple\"]\n\n    // 更新值\n    dict[\"bag\"] = \"包包\"\n\n    // 更新键 返回nil\n    dict.updateValue(\"大苹果\", forKey: \"apple\")\n\n    // 当键不存在时会添加一个,返回nil\n    dict.updateValue(\"电脑\", forKey: \"computer\")\n\n    // 删除一个键,返回被删除的值\n    dict.removeValueForKey(\"computer\")\n\n    // 删除所有的值\n    //dict.removeAll()\n\n    /*\n     * 遍历字典\n     */\n\n    for (key,value) in dict {\n      println(key)\n      println(value)\n    }\n\n    // 只遍历key\n    for key in dict.keys {\n      println(key)\n    }\n\n    // 只遍历value\n    for value in dict.values {\n      println(value)\n    }","slug":"swift-Dictionary-字典","published":1,"updated":"2016-08-14T07:09:45.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5u1000s18twwp1m4vcw","content":"<pre><code>/*\n *定义一个字典\n */\n\n// 完整严格定义一个字典\nvar dict: Dictionary&lt;String,String&gt; = [&quot;apple&quot;: &quot;苹果&quot;, &quot;bag&quot;:&quot;包&quot;]\n\n// 简单定义一个字典\nvar dict2 = [:]\n\n// 字典元素个数\ndict.count\n\ndict[&quot;apple&quot;]\n\n// 更新值\ndict[&quot;bag&quot;] = &quot;包包&quot;\n\n// 更新键 返回nil\ndict.updateValue(&quot;大苹果&quot;, forKey: &quot;apple&quot;)\n\n// 当键不存在时会添加一个,返回nil\ndict.updateValue(&quot;电脑&quot;, forKey: &quot;computer&quot;)\n\n// 删除一个键,返回被删除的值\ndict.removeValueForKey(&quot;computer&quot;)\n\n// 删除所有的值\n//dict.removeAll()\n\n/*\n * 遍历字典\n */\n\nfor (key,value) in dict {\n  println(key)\n  println(value)\n}\n\n// 只遍历key\nfor key in dict.keys {\n  println(key)\n}\n\n// 只遍历value\nfor value in dict.values {\n  println(value)\n}\n</code></pre>","excerpt":"","more":"<pre><code>/*\n *定义一个字典\n */\n\n// 完整严格定义一个字典\nvar dict: Dictionary&lt;String,String&gt; = [&quot;apple&quot;: &quot;苹果&quot;, &quot;bag&quot;:&quot;包&quot;]\n\n// 简单定义一个字典\nvar dict2 = [:]\n\n// 字典元素个数\ndict.count\n\ndict[&quot;apple&quot;]\n\n// 更新值\ndict[&quot;bag&quot;] = &quot;包包&quot;\n\n// 更新键 返回nil\ndict.updateValue(&quot;大苹果&quot;, forKey: &quot;apple&quot;)\n\n// 当键不存在时会添加一个,返回nil\ndict.updateValue(&quot;电脑&quot;, forKey: &quot;computer&quot;)\n\n// 删除一个键,返回被删除的值\ndict.removeValueForKey(&quot;computer&quot;)\n\n// 删除所有的值\n//dict.removeAll()\n\n/*\n * 遍历字典\n */\n\nfor (key,value) in dict {\n  println(key)\n  println(value)\n}\n\n// 只遍历key\nfor key in dict.keys {\n  println(key)\n}\n\n// 只遍历value\nfor value in dict.values {\n  println(value)\n}\n</code></pre>"},{"title":"swift Tuples(元祖)类型","date":"2015-06-18T05:33:12.000Z","_content":"  \n* 将多个不同的值集合成一个数据\n* 可以有任意多个值\n* 不同的值可以是不同的类型\n\n    \n    // 声明一个元祖类型\n    let tuplesTest:(Bool, Int, String) = (false, 404, \"Not Found\");\n\n    // 元祖类型示例\n    let tuples1 = (false, 404, \"Not Found\");\n    // key:value形式\n    let tuples2 = (isSuccess: false, errorCode: 404, errorMessage: \"Not Found\");\n\n    /* \n     * 访问元祖中的数据\n    */\n    // 1.通过定义常量访问\n    let (isSuccess, errorCode, errorMessage) = tuples1;\n    println(isSuccess); // -> false\n    println(errorCode); // -> 404\n    println(errorMessage); // -> \"Not Found\"\n\n    // 2.直接通过下标访问\n    println(tuples1.0); // -> false\n    println(tuples1.1); // -> 404\n    println(tuples1.2); // -> \"Not Found\"\n\n    // 3.通过key来访问\n    println(tuples2.isSuccess); // -> false\n    println(tuples2.errorCode); // -> 404\n    println(tuples2.errorMessage); // -> \"Not Found\"\n\n    // 使用下划线 _ 忽略部分数值\n    let (_, _, errorMessage2) = tuples1;\n    println(errorMessage2); // -> \"Not Found\"","source":"_posts/swift-Tuples-元祖-类型.md","raw":"title: \"swift Tuples(元祖)类型\"\ndate: 2015-06-18 13:33:12\ntags: 元祖类型\ncategories: swift\n---\n  \n* 将多个不同的值集合成一个数据\n* 可以有任意多个值\n* 不同的值可以是不同的类型\n\n    \n    // 声明一个元祖类型\n    let tuplesTest:(Bool, Int, String) = (false, 404, \"Not Found\");\n\n    // 元祖类型示例\n    let tuples1 = (false, 404, \"Not Found\");\n    // key:value形式\n    let tuples2 = (isSuccess: false, errorCode: 404, errorMessage: \"Not Found\");\n\n    /* \n     * 访问元祖中的数据\n    */\n    // 1.通过定义常量访问\n    let (isSuccess, errorCode, errorMessage) = tuples1;\n    println(isSuccess); // -> false\n    println(errorCode); // -> 404\n    println(errorMessage); // -> \"Not Found\"\n\n    // 2.直接通过下标访问\n    println(tuples1.0); // -> false\n    println(tuples1.1); // -> 404\n    println(tuples1.2); // -> \"Not Found\"\n\n    // 3.通过key来访问\n    println(tuples2.isSuccess); // -> false\n    println(tuples2.errorCode); // -> 404\n    println(tuples2.errorMessage); // -> \"Not Found\"\n\n    // 使用下划线 _ 忽略部分数值\n    let (_, _, errorMessage2) = tuples1;\n    println(errorMessage2); // -> \"Not Found\"","slug":"swift-Tuples-元祖-类型","published":1,"updated":"2016-08-14T07:09:45.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5u4000v18twz314gy3k","content":"<ul>\n<li>将多个不同的值集合成一个数据</li>\n<li>可以有任意多个值</li>\n<li>不同的值可以是不同的类型</li>\n</ul>\n<pre><code>// 声明一个元祖类型\nlet tuplesTest:(Bool, Int, String) = (false, 404, &quot;Not Found&quot;);\n\n// 元祖类型示例\nlet tuples1 = (false, 404, &quot;Not Found&quot;);\n// key:value形式\nlet tuples2 = (isSuccess: false, errorCode: 404, errorMessage: &quot;Not Found&quot;);\n\n/* \n * 访问元祖中的数据\n*/\n// 1.通过定义常量访问\nlet (isSuccess, errorCode, errorMessage) = tuples1;\nprintln(isSuccess); // -&gt; false\nprintln(errorCode); // -&gt; 404\nprintln(errorMessage); // -&gt; &quot;Not Found&quot;\n\n// 2.直接通过下标访问\nprintln(tuples1.0); // -&gt; false\nprintln(tuples1.1); // -&gt; 404\nprintln(tuples1.2); // -&gt; &quot;Not Found&quot;\n\n// 3.通过key来访问\nprintln(tuples2.isSuccess); // -&gt; false\nprintln(tuples2.errorCode); // -&gt; 404\nprintln(tuples2.errorMessage); // -&gt; &quot;Not Found&quot;\n\n// 使用下划线 _ 忽略部分数值\nlet (_, _, errorMessage2) = tuples1;\nprintln(errorMessage2); // -&gt; &quot;Not Found&quot;\n</code></pre>","excerpt":"","more":"<ul>\n<li>将多个不同的值集合成一个数据</li>\n<li>可以有任意多个值</li>\n<li>不同的值可以是不同的类型</li>\n</ul>\n<pre><code>// 声明一个元祖类型\nlet tuplesTest:(Bool, Int, String) = (false, 404, &quot;Not Found&quot;);\n\n// 元祖类型示例\nlet tuples1 = (false, 404, &quot;Not Found&quot;);\n// key:value形式\nlet tuples2 = (isSuccess: false, errorCode: 404, errorMessage: &quot;Not Found&quot;);\n\n/* \n * 访问元祖中的数据\n*/\n// 1.通过定义常量访问\nlet (isSuccess, errorCode, errorMessage) = tuples1;\nprintln(isSuccess); // -&gt; false\nprintln(errorCode); // -&gt; 404\nprintln(errorMessage); // -&gt; &quot;Not Found&quot;\n\n// 2.直接通过下标访问\nprintln(tuples1.0); // -&gt; false\nprintln(tuples1.1); // -&gt; 404\nprintln(tuples1.2); // -&gt; &quot;Not Found&quot;\n\n// 3.通过key来访问\nprintln(tuples2.isSuccess); // -&gt; false\nprintln(tuples2.errorCode); // -&gt; 404\nprintln(tuples2.errorMessage); // -&gt; &quot;Not Found&quot;\n\n// 使用下划线 _ 忽略部分数值\nlet (_, _, errorMessage2) = tuples1;\nprintln(errorMessage2); // -&gt; &quot;Not Found&quot;\n</code></pre>"},{"title":"swift UILabel","date":"2015-08-11T05:22:59.000Z","_content":"\n        // 设置label位置和大小\n        let textLabel = UILabel(frame:CGRectMake(0, 30, 300, 30));\n\n        // 设置文本\n        textLabel.text = \"测试label\";\n        \n        // 设置背景颜色\n        var redColor = UIColor(red:1.0,green:0,blue:0,alpha:1.0);\n        textLabel.backgroundColor = redColor;\n        \n        // 设置文本对其方式\n        textLabel.textAlignment = NSTextAlignment.Center;\n        \n        // 设置字体颜色\n        textLabel.textColor = UIColor.blueColor();\n        \n        // 设置字体和大小\n        textLabel.font = UIFont(name:\"Thonburi\",size:30);\n        \n        let Color1 = UIColor(red:255,green:255,blue:0,alpha:1);\n        \n        \n        // 把UILabel放入视图\n        self.view.addSubview(textLabel)\n","source":"_posts/swift-UILabel.md","raw":"title: \"swift UILabel\"\ndate: 2015-08-11 13:22:59\ntags: UILabel\ncategories: swift\n---\n\n        // 设置label位置和大小\n        let textLabel = UILabel(frame:CGRectMake(0, 30, 300, 30));\n\n        // 设置文本\n        textLabel.text = \"测试label\";\n        \n        // 设置背景颜色\n        var redColor = UIColor(red:1.0,green:0,blue:0,alpha:1.0);\n        textLabel.backgroundColor = redColor;\n        \n        // 设置文本对其方式\n        textLabel.textAlignment = NSTextAlignment.Center;\n        \n        // 设置字体颜色\n        textLabel.textColor = UIColor.blueColor();\n        \n        // 设置字体和大小\n        textLabel.font = UIFont(name:\"Thonburi\",size:30);\n        \n        let Color1 = UIColor(red:255,green:255,blue:0,alpha:1);\n        \n        \n        // 把UILabel放入视图\n        self.view.addSubview(textLabel)\n","slug":"swift-UILabel","published":1,"updated":"2016-08-14T07:09:45.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5u7000x18twdbidhowd","content":"<pre><code>// 设置label位置和大小\nlet textLabel = UILabel(frame:CGRectMake(0, 30, 300, 30));\n\n// 设置文本\ntextLabel.text = &quot;测试label&quot;;\n\n// 设置背景颜色\nvar redColor = UIColor(red:1.0,green:0,blue:0,alpha:1.0);\ntextLabel.backgroundColor = redColor;\n\n// 设置文本对其方式\ntextLabel.textAlignment = NSTextAlignment.Center;\n\n// 设置字体颜色\ntextLabel.textColor = UIColor.blueColor();\n\n// 设置字体和大小\ntextLabel.font = UIFont(name:&quot;Thonburi&quot;,size:30);\n\nlet Color1 = UIColor(red:255,green:255,blue:0,alpha:1);\n\n\n// 把UILabel放入视图\nself.view.addSubview(textLabel)\n</code></pre>","excerpt":"","more":"<pre><code>// 设置label位置和大小\nlet textLabel = UILabel(frame:CGRectMake(0, 30, 300, 30));\n\n// 设置文本\ntextLabel.text = &quot;测试label&quot;;\n\n// 设置背景颜色\nvar redColor = UIColor(red:1.0,green:0,blue:0,alpha:1.0);\ntextLabel.backgroundColor = redColor;\n\n// 设置文本对其方式\ntextLabel.textAlignment = NSTextAlignment.Center;\n\n// 设置字体颜色\ntextLabel.textColor = UIColor.blueColor();\n\n// 设置字体和大小\ntextLabel.font = UIFont(name:&quot;Thonburi&quot;,size:30);\n\nlet Color1 = UIColor(red:255,green:255,blue:0,alpha:1);\n\n\n// 把UILabel放入视图\nself.view.addSubview(textLabel)\n</code></pre>"},{"title":"swift Optionals(可选值)","date":"2015-06-18T06:06:26.000Z","_content":"* 声明后面加? \n* 可选值不能进行强制类型转换,需要解包\n* 可选值后面加!来进行解包\n\n\n    // 声明一个可选值\n    let strA:String? = \"test\";\n    // 可选值解包\n    let strB:String! = strA;\n\n    var a:Int;\n    // println(a); 报错, a没有初始化值\n\n    var age:Int?;\n    println(age); // -> nil\n    age = 12;\n    println(age); // -> Optional(12) 表示可选值12\n\n    if age != nil {\n        println(\"you age is \\(age)\"); // -> you age is Optional(12)\n        \n        // 把可选值转化为可定有值(可选值的解包)\n        println(\"you age is \\(age!)\"); // -> you age is 12\n    }\n\n\n    // String(age); 报错,可选值不能强制进行类型转换\n    String(age!); // ->12","source":"_posts/swift-Optionals-可选值.md","raw":"title: \"swift Optionals(可选值)\"\ndate: 2015-06-18 14:06:26\ntags: 可选值\ncategories: swift\n---\n* 声明后面加? \n* 可选值不能进行强制类型转换,需要解包\n* 可选值后面加!来进行解包\n\n\n    // 声明一个可选值\n    let strA:String? = \"test\";\n    // 可选值解包\n    let strB:String! = strA;\n\n    var a:Int;\n    // println(a); 报错, a没有初始化值\n\n    var age:Int?;\n    println(age); // -> nil\n    age = 12;\n    println(age); // -> Optional(12) 表示可选值12\n\n    if age != nil {\n        println(\"you age is \\(age)\"); // -> you age is Optional(12)\n        \n        // 把可选值转化为可定有值(可选值的解包)\n        println(\"you age is \\(age!)\"); // -> you age is 12\n    }\n\n\n    // String(age); 报错,可选值不能强制进行类型转换\n    String(age!); // ->12","slug":"swift-Optionals-可选值","published":1,"updated":"2016-08-14T07:09:45.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5ua001118tw0s3n2eue","content":"<ul>\n<li>声明后面加? </li>\n<li>可选值不能进行强制类型转换,需要解包</li>\n<li>可选值后面加!来进行解包</li>\n</ul>\n<pre><code>// 声明一个可选值\nlet strA:String? = &quot;test&quot;;\n// 可选值解包\nlet strB:String! = strA;\n\nvar a:Int;\n// println(a); 报错, a没有初始化值\n\nvar age:Int?;\nprintln(age); // -&gt; nil\nage = 12;\nprintln(age); // -&gt; Optional(12) 表示可选值12\n\nif age != nil {\n    println(&quot;you age is \\(age)&quot;); // -&gt; you age is Optional(12)\n\n    // 把可选值转化为可定有值(可选值的解包)\n    println(&quot;you age is \\(age!)&quot;); // -&gt; you age is 12\n}\n\n\n// String(age); 报错,可选值不能强制进行类型转换\nString(age!); // -&gt;12\n</code></pre>","excerpt":"","more":"<ul>\n<li>声明后面加? </li>\n<li>可选值不能进行强制类型转换,需要解包</li>\n<li>可选值后面加!来进行解包</li>\n</ul>\n<pre><code>// 声明一个可选值\nlet strA:String? = &quot;test&quot;;\n// 可选值解包\nlet strB:String! = strA;\n\nvar a:Int;\n// println(a); 报错, a没有初始化值\n\nvar age:Int?;\nprintln(age); // -&gt; nil\nage = 12;\nprintln(age); // -&gt; Optional(12) 表示可选值12\n\nif age != nil {\n    println(&quot;you age is \\(age)&quot;); // -&gt; you age is Optional(12)\n\n    // 把可选值转化为可定有值(可选值的解包)\n    println(&quot;you age is \\(age!)&quot;); // -&gt; you age is 12\n}\n\n\n// String(age); 报错,可选值不能强制进行类型转换\nString(age!); // -&gt;12\n</code></pre>"},{"title":"swift 二维数组","date":"2015-09-24T06:52:42.000Z","_content":"二维数组的声明以及遍历\n\n    // 方法一\n    var array1 = [[Int]]() \n    // 方法二\n    var array2 = Array<Array<Int>>()\n\n    array1 = [[1,2], [3,4]]\n    array2 = [[5,6,7],[8,9,0]]\n\n    // 遍历\n    for(var i = 0; i < 2; i++){\n      for(var j = 0; j < 3; j++){\n        print(array2[i][j])\n      }\n    }\n\n另一种二维数组申明方法\n    \n    // 苹果官方的教程\n    struct Matrix {\n      let rows: Int, columns: Int\n      var grid: [Int]\n      init(rows: Int, columns: Int) {\n        self.rows = rows\n        self.columns = columns\n        grid = Array(count: rows * columns, repeatedValue: 0)\n      }\n      func indexIsValidForRow(row: Int, column: Int) -> Bool {\n        return row >= 0 && row < rows && column >= 0 && column < columns\n      }\n      subscript(row: Int, column: Int) -> Int {\n        get {\n          assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n          return grid[(row * columns) + column]\n        }\n        set {\n          assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n          grid[(row * columns) + column] = newValue\n        }\n      }\n    }\n    \n    // 初始化\n    var tempArray = Matrix(rows: 2, columns: 2)\n    tempArray.grid = [0,1,2,3]\n    \n    // 遍历\n    for(var i = 0; i < 2; i++){\n      for (var j = 0; j < 2; j++){\n        print(tempArray[i,j])\n      }\n    }\n\n","source":"_posts/swift-二维数组.md","raw":"title: \"swift 二维数组\"\ndate: 2015-09-24 14:52:42\ntags: 二维数组\ncategories: swift\n---\n二维数组的声明以及遍历\n\n    // 方法一\n    var array1 = [[Int]]() \n    // 方法二\n    var array2 = Array<Array<Int>>()\n\n    array1 = [[1,2], [3,4]]\n    array2 = [[5,6,7],[8,9,0]]\n\n    // 遍历\n    for(var i = 0; i < 2; i++){\n      for(var j = 0; j < 3; j++){\n        print(array2[i][j])\n      }\n    }\n\n另一种二维数组申明方法\n    \n    // 苹果官方的教程\n    struct Matrix {\n      let rows: Int, columns: Int\n      var grid: [Int]\n      init(rows: Int, columns: Int) {\n        self.rows = rows\n        self.columns = columns\n        grid = Array(count: rows * columns, repeatedValue: 0)\n      }\n      func indexIsValidForRow(row: Int, column: Int) -> Bool {\n        return row >= 0 && row < rows && column >= 0 && column < columns\n      }\n      subscript(row: Int, column: Int) -> Int {\n        get {\n          assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n          return grid[(row * columns) + column]\n        }\n        set {\n          assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n          grid[(row * columns) + column] = newValue\n        }\n      }\n    }\n    \n    // 初始化\n    var tempArray = Matrix(rows: 2, columns: 2)\n    tempArray.grid = [0,1,2,3]\n    \n    // 遍历\n    for(var i = 0; i < 2; i++){\n      for (var j = 0; j < 2; j++){\n        print(tempArray[i,j])\n      }\n    }\n\n","slug":"swift-二维数组","published":1,"updated":"2016-08-14T07:09:45.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5uc001318tw7ouizzfy","content":"<p>二维数组的声明以及遍历</p>\n<pre><code>// 方法一\nvar array1 = [[Int]]() \n// 方法二\nvar array2 = Array&lt;Array&lt;Int&gt;&gt;()\n\narray1 = [[1,2], [3,4]]\narray2 = [[5,6,7],[8,9,0]]\n\n// 遍历\nfor(var i = 0; i &lt; 2; i++){\n  for(var j = 0; j &lt; 3; j++){\n    print(array2[i][j])\n  }\n}\n</code></pre><p>另一种二维数组申明方法</p>\n<pre><code>// 苹果官方的教程\nstruct Matrix {\n  let rows: Int, columns: Int\n  var grid: [Int]\n  init(rows: Int, columns: Int) {\n    self.rows = rows\n    self.columns = columns\n    grid = Array(count: rows * columns, repeatedValue: 0)\n  }\n  func indexIsValidForRow(row: Int, column: Int) -&gt; Bool {\n    return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns\n  }\n  subscript(row: Int, column: Int) -&gt; Int {\n    get {\n      assert(indexIsValidForRow(row, column: column), &quot;Index out of range&quot;)\n      return grid[(row * columns) + column]\n    }\n    set {\n      assert(indexIsValidForRow(row, column: column), &quot;Index out of range&quot;)\n      grid[(row * columns) + column] = newValue\n    }\n  }\n}\n\n// 初始化\nvar tempArray = Matrix(rows: 2, columns: 2)\ntempArray.grid = [0,1,2,3]\n\n// 遍历\nfor(var i = 0; i &lt; 2; i++){\n  for (var j = 0; j &lt; 2; j++){\n    print(tempArray[i,j])\n  }\n}\n</code></pre>","excerpt":"","more":"<p>二维数组的声明以及遍历</p>\n<pre><code>// 方法一\nvar array1 = [[Int]]() \n// 方法二\nvar array2 = Array&lt;Array&lt;Int&gt;&gt;()\n\narray1 = [[1,2], [3,4]]\narray2 = [[5,6,7],[8,9,0]]\n\n// 遍历\nfor(var i = 0; i &lt; 2; i++){\n  for(var j = 0; j &lt; 3; j++){\n    print(array2[i][j])\n  }\n}\n</code></pre><p>另一种二维数组申明方法</p>\n<pre><code>// 苹果官方的教程\nstruct Matrix {\n  let rows: Int, columns: Int\n  var grid: [Int]\n  init(rows: Int, columns: Int) {\n    self.rows = rows\n    self.columns = columns\n    grid = Array(count: rows * columns, repeatedValue: 0)\n  }\n  func indexIsValidForRow(row: Int, column: Int) -&gt; Bool {\n    return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns\n  }\n  subscript(row: Int, column: Int) -&gt; Int {\n    get {\n      assert(indexIsValidForRow(row, column: column), &quot;Index out of range&quot;)\n      return grid[(row * columns) + column]\n    }\n    set {\n      assert(indexIsValidForRow(row, column: column), &quot;Index out of range&quot;)\n      grid[(row * columns) + column] = newValue\n    }\n  }\n}\n\n// 初始化\nvar tempArray = Matrix(rows: 2, columns: 2)\ntempArray.grid = [0,1,2,3]\n\n// 遍历\nfor(var i = 0; i &lt; 2; i++){\n  for (var j = 0; j &lt; 2; j++){\n    print(tempArray[i,j])\n  }\n}\n</code></pre>"},{"title":"swift 动画","date":"2015-09-21T06:43:50.000Z","_content":"### 动画关键方法 <code>animateWithDuration</code>\n    \n    animateWithDuration(\n      动画持续时间: Double,\n      动画延迟执行时间: Double,\n      弹性参数: Double,\n      弹性起始值: Double,\n      运动曲线: CurveEaseInOut(平滑),\n      动画执行方法: Func,\n      执行完回调方法: Func\n    )\n\n\n例子: 缩放运动变色的红球\n  \n    let redBall = UIView(frame: CGRectMake(50, 50, 100, 100))\n    redBall.backgroundColor = UIColor.redColor()\n    \n    // 设置圆角\n    redBall.layer.cornerRadius = 50\n    \n    self.view.addSubview(redBall)\n    \n    // 创建缩放动画\n    UIView.animateWithDuration(\n      0.5, \n      delay: 0,\n      usingSpringWithDamping: 0.3,\n      initialSpringVelocity: 0.2, \n      options: UIViewAnimationOptions.CurveEaseInOut, \n      animations: { () -> Void in\n      \n        // 只是放大2倍\n        // redBall.transform = CGAffineTransformMakeScale(2, 2)\n        \n        // 只是位移动画\n        // redBall.transform = CGAffineTransformMakeTranslation(158, 58)\n        \n        \n        // 两个动画组合在一起\n        redBall.transform = CGAffineTransformConcat(\n\n          // 缩放\n          CGAffineTransformMakeScale(2, 2), \n\n          // 位移\n          CGAffineTransformMakeTranslation(158, 58)\n        )\n        \n        // 颜色变绿\n        redBall.backgroundColor = UIColor.greenColor()\n      \n      }, \n      completion: nil\n    )","source":"_posts/swift-动画.md","raw":"title: \"swift 动画\"\ndate: 2015-09-21 14:43:50\ntags: 动画\ncategories: swift\n---\n### 动画关键方法 <code>animateWithDuration</code>\n    \n    animateWithDuration(\n      动画持续时间: Double,\n      动画延迟执行时间: Double,\n      弹性参数: Double,\n      弹性起始值: Double,\n      运动曲线: CurveEaseInOut(平滑),\n      动画执行方法: Func,\n      执行完回调方法: Func\n    )\n\n\n例子: 缩放运动变色的红球\n  \n    let redBall = UIView(frame: CGRectMake(50, 50, 100, 100))\n    redBall.backgroundColor = UIColor.redColor()\n    \n    // 设置圆角\n    redBall.layer.cornerRadius = 50\n    \n    self.view.addSubview(redBall)\n    \n    // 创建缩放动画\n    UIView.animateWithDuration(\n      0.5, \n      delay: 0,\n      usingSpringWithDamping: 0.3,\n      initialSpringVelocity: 0.2, \n      options: UIViewAnimationOptions.CurveEaseInOut, \n      animations: { () -> Void in\n      \n        // 只是放大2倍\n        // redBall.transform = CGAffineTransformMakeScale(2, 2)\n        \n        // 只是位移动画\n        // redBall.transform = CGAffineTransformMakeTranslation(158, 58)\n        \n        \n        // 两个动画组合在一起\n        redBall.transform = CGAffineTransformConcat(\n\n          // 缩放\n          CGAffineTransformMakeScale(2, 2), \n\n          // 位移\n          CGAffineTransformMakeTranslation(158, 58)\n        )\n        \n        // 颜色变绿\n        redBall.backgroundColor = UIColor.greenColor()\n      \n      }, \n      completion: nil\n    )","slug":"swift-动画","published":1,"updated":"2016-08-14T07:09:45.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5uf001618twn5543s4v","content":"<h3 id=\"动画关键方法-animateWithDuration\"><a href=\"#动画关键方法-animateWithDuration\" class=\"headerlink\" title=\"动画关键方法 animateWithDuration\"></a>动画关键方法 <code>animateWithDuration</code></h3><pre><code>animateWithDuration(\n  动画持续时间: Double,\n  动画延迟执行时间: Double,\n  弹性参数: Double,\n  弹性起始值: Double,\n  运动曲线: CurveEaseInOut(平滑),\n  动画执行方法: Func,\n  执行完回调方法: Func\n)\n</code></pre><p>例子: 缩放运动变色的红球</p>\n<pre><code>let redBall = UIView(frame: CGRectMake(50, 50, 100, 100))\nredBall.backgroundColor = UIColor.redColor()\n\n// 设置圆角\nredBall.layer.cornerRadius = 50\n\nself.view.addSubview(redBall)\n\n// 创建缩放动画\nUIView.animateWithDuration(\n  0.5, \n  delay: 0,\n  usingSpringWithDamping: 0.3,\n  initialSpringVelocity: 0.2, \n  options: UIViewAnimationOptions.CurveEaseInOut, \n  animations: { () -&gt; Void in\n\n    // 只是放大2倍\n    // redBall.transform = CGAffineTransformMakeScale(2, 2)\n\n    // 只是位移动画\n    // redBall.transform = CGAffineTransformMakeTranslation(158, 58)\n\n\n    // 两个动画组合在一起\n    redBall.transform = CGAffineTransformConcat(\n\n      // 缩放\n      CGAffineTransformMakeScale(2, 2), \n\n      // 位移\n      CGAffineTransformMakeTranslation(158, 58)\n    )\n\n    // 颜色变绿\n    redBall.backgroundColor = UIColor.greenColor()\n\n  }, \n  completion: nil\n)\n</code></pre>","excerpt":"","more":"<h3 id=\"动画关键方法-animateWithDuration\"><a href=\"#动画关键方法-animateWithDuration\" class=\"headerlink\" title=\"动画关键方法 animateWithDuration\"></a>动画关键方法 <code>animateWithDuration</code></h3><pre><code>animateWithDuration(\n  动画持续时间: Double,\n  动画延迟执行时间: Double,\n  弹性参数: Double,\n  弹性起始值: Double,\n  运动曲线: CurveEaseInOut(平滑),\n  动画执行方法: Func,\n  执行完回调方法: Func\n)\n</code></pre><p>例子: 缩放运动变色的红球</p>\n<pre><code>let redBall = UIView(frame: CGRectMake(50, 50, 100, 100))\nredBall.backgroundColor = UIColor.redColor()\n\n// 设置圆角\nredBall.layer.cornerRadius = 50\n\nself.view.addSubview(redBall)\n\n// 创建缩放动画\nUIView.animateWithDuration(\n  0.5, \n  delay: 0,\n  usingSpringWithDamping: 0.3,\n  initialSpringVelocity: 0.2, \n  options: UIViewAnimationOptions.CurveEaseInOut, \n  animations: { () -&gt; Void in\n\n    // 只是放大2倍\n    // redBall.transform = CGAffineTransformMakeScale(2, 2)\n\n    // 只是位移动画\n    // redBall.transform = CGAffineTransformMakeTranslation(158, 58)\n\n\n    // 两个动画组合在一起\n    redBall.transform = CGAffineTransformConcat(\n\n      // 缩放\n      CGAffineTransformMakeScale(2, 2), \n\n      // 位移\n      CGAffineTransformMakeTranslation(158, 58)\n    )\n\n    // 颜色变绿\n    redBall.backgroundColor = UIColor.greenColor()\n\n  }, \n  completion: nil\n)\n</code></pre>"},{"title":"swift 枚举类型","date":"2015-09-08T06:17:35.000Z","_content":"  \n    /**\n     * swift 枚举类型\n     */\n\n    // 声明枚举 下面两种方法等价\n    enum Method {\n    //  case Add\n    //  case Sub\n    //  case Mul\n    //  case Div\n      case Add, Sub, Mul, Div\n    }\n\n    // 使用枚举的两种写法\n    var m0: Method = .Add\n    var m1 = Method.Sub\n\n    // switch匹配枚举\n    func chooseMethod(op: Method) -> (Double, Double) -> Double {\n      switch op {\n        case .Add:\n          func add(a:Double, b:Double) -> Double {\n            return a + b\n          }\n          return add\n        case .Sub:\n          return {\n            (a:Double, b:Double) -> Double in\n            return a - b\n          }\n        case .Mul:\n          return {\n            return $0 * $1\n          }\n        case .Div:\n          return {\n            $0 / $1\n          }\n    //  default:\n    //    return { $0 / $1}\n      }\n    }\n\n    let val = chooseMethod(.Mul)(30, 5)\n\n    // 枚举的原始值\n    // 可以为任意类型,整型可以不指定值,默认从0开始向后+1,其它类型声明时必须全部都指定值\n    enum MethodInt: Int {\n      \n      // 这里Add是0, Sub是1, Mul是2, Div是3\n      // case Add, Sub, Mul, Div\n      case Add = 5, Sub = 9, Mul, Div\n    }\n\n    enum MethodStr: String {\n      case Add = \"add\", Sub = \"sub\", Mul = \"mul\", Div = \"div\"\n    }\n\n    // 获取枚举的原始值\n    MethodInt.Sub.rawValue\n    Method.Mul.hashValue\n    MethodStr.Add.rawValue\n\n\n    // 枚举关联值\n    // 用元祖方式每个枚举可以设置多个关联值\n    enum LineSegment {\n      case StartAndEnd(start: Double, end:Double)\n      case StartAndPattern(start: Double, pattern: Double)\n    }\n    var lsd = LineSegment.StartAndEnd(start: 10, end: 20)\n    switch lsd {\n    case .StartAndEnd(let s, let e):\n      println(\"\\(s) -> \\(e)\")\n    case .StartAndPattern(let s, let len):\n      println(\"\\(s) -> \\(len)\")\n    }\n    // -> \"10.0 -> 20.0\"\n\n","source":"_posts/swift-枚举类型.md","raw":"title: \"swift 枚举类型\"\ndate: 2015-09-08 14:17:35\ntags: 枚举, enum\ncategories: swift\n---\n  \n    /**\n     * swift 枚举类型\n     */\n\n    // 声明枚举 下面两种方法等价\n    enum Method {\n    //  case Add\n    //  case Sub\n    //  case Mul\n    //  case Div\n      case Add, Sub, Mul, Div\n    }\n\n    // 使用枚举的两种写法\n    var m0: Method = .Add\n    var m1 = Method.Sub\n\n    // switch匹配枚举\n    func chooseMethod(op: Method) -> (Double, Double) -> Double {\n      switch op {\n        case .Add:\n          func add(a:Double, b:Double) -> Double {\n            return a + b\n          }\n          return add\n        case .Sub:\n          return {\n            (a:Double, b:Double) -> Double in\n            return a - b\n          }\n        case .Mul:\n          return {\n            return $0 * $1\n          }\n        case .Div:\n          return {\n            $0 / $1\n          }\n    //  default:\n    //    return { $0 / $1}\n      }\n    }\n\n    let val = chooseMethod(.Mul)(30, 5)\n\n    // 枚举的原始值\n    // 可以为任意类型,整型可以不指定值,默认从0开始向后+1,其它类型声明时必须全部都指定值\n    enum MethodInt: Int {\n      \n      // 这里Add是0, Sub是1, Mul是2, Div是3\n      // case Add, Sub, Mul, Div\n      case Add = 5, Sub = 9, Mul, Div\n    }\n\n    enum MethodStr: String {\n      case Add = \"add\", Sub = \"sub\", Mul = \"mul\", Div = \"div\"\n    }\n\n    // 获取枚举的原始值\n    MethodInt.Sub.rawValue\n    Method.Mul.hashValue\n    MethodStr.Add.rawValue\n\n\n    // 枚举关联值\n    // 用元祖方式每个枚举可以设置多个关联值\n    enum LineSegment {\n      case StartAndEnd(start: Double, end:Double)\n      case StartAndPattern(start: Double, pattern: Double)\n    }\n    var lsd = LineSegment.StartAndEnd(start: 10, end: 20)\n    switch lsd {\n    case .StartAndEnd(let s, let e):\n      println(\"\\(s) -> \\(e)\")\n    case .StartAndPattern(let s, let len):\n      println(\"\\(s) -> \\(len)\")\n    }\n    // -> \"10.0 -> 20.0\"\n\n","slug":"swift-枚举类型","published":1,"updated":"2016-08-14T07:09:45.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5ui001918tw1msg5l0n","content":"<pre><code>/**\n * swift 枚举类型\n */\n\n// 声明枚举 下面两种方法等价\nenum Method {\n//  case Add\n//  case Sub\n//  case Mul\n//  case Div\n  case Add, Sub, Mul, Div\n}\n\n// 使用枚举的两种写法\nvar m0: Method = .Add\nvar m1 = Method.Sub\n\n// switch匹配枚举\nfunc chooseMethod(op: Method) -&gt; (Double, Double) -&gt; Double {\n  switch op {\n    case .Add:\n      func add(a:Double, b:Double) -&gt; Double {\n        return a + b\n      }\n      return add\n    case .Sub:\n      return {\n        (a:Double, b:Double) -&gt; Double in\n        return a - b\n      }\n    case .Mul:\n      return {\n        return $0 * $1\n      }\n    case .Div:\n      return {\n        $0 / $1\n      }\n//  default:\n//    return { $0 / $1}\n  }\n}\n\nlet val = chooseMethod(.Mul)(30, 5)\n\n// 枚举的原始值\n// 可以为任意类型,整型可以不指定值,默认从0开始向后+1,其它类型声明时必须全部都指定值\nenum MethodInt: Int {\n\n  // 这里Add是0, Sub是1, Mul是2, Div是3\n  // case Add, Sub, Mul, Div\n  case Add = 5, Sub = 9, Mul, Div\n}\n\nenum MethodStr: String {\n  case Add = &quot;add&quot;, Sub = &quot;sub&quot;, Mul = &quot;mul&quot;, Div = &quot;div&quot;\n}\n\n// 获取枚举的原始值\nMethodInt.Sub.rawValue\nMethod.Mul.hashValue\nMethodStr.Add.rawValue\n\n\n// 枚举关联值\n// 用元祖方式每个枚举可以设置多个关联值\nenum LineSegment {\n  case StartAndEnd(start: Double, end:Double)\n  case StartAndPattern(start: Double, pattern: Double)\n}\nvar lsd = LineSegment.StartAndEnd(start: 10, end: 20)\nswitch lsd {\ncase .StartAndEnd(let s, let e):\n  println(&quot;\\(s) -&gt; \\(e)&quot;)\ncase .StartAndPattern(let s, let len):\n  println(&quot;\\(s) -&gt; \\(len)&quot;)\n}\n// -&gt; &quot;10.0 -&gt; 20.0&quot;\n</code></pre>","excerpt":"","more":"<pre><code>/**\n * swift 枚举类型\n */\n\n// 声明枚举 下面两种方法等价\nenum Method {\n//  case Add\n//  case Sub\n//  case Mul\n//  case Div\n  case Add, Sub, Mul, Div\n}\n\n// 使用枚举的两种写法\nvar m0: Method = .Add\nvar m1 = Method.Sub\n\n// switch匹配枚举\nfunc chooseMethod(op: Method) -&gt; (Double, Double) -&gt; Double {\n  switch op {\n    case .Add:\n      func add(a:Double, b:Double) -&gt; Double {\n        return a + b\n      }\n      return add\n    case .Sub:\n      return {\n        (a:Double, b:Double) -&gt; Double in\n        return a - b\n      }\n    case .Mul:\n      return {\n        return $0 * $1\n      }\n    case .Div:\n      return {\n        $0 / $1\n      }\n//  default:\n//    return { $0 / $1}\n  }\n}\n\nlet val = chooseMethod(.Mul)(30, 5)\n\n// 枚举的原始值\n// 可以为任意类型,整型可以不指定值,默认从0开始向后+1,其它类型声明时必须全部都指定值\nenum MethodInt: Int {\n\n  // 这里Add是0, Sub是1, Mul是2, Div是3\n  // case Add, Sub, Mul, Div\n  case Add = 5, Sub = 9, Mul, Div\n}\n\nenum MethodStr: String {\n  case Add = &quot;add&quot;, Sub = &quot;sub&quot;, Mul = &quot;mul&quot;, Div = &quot;div&quot;\n}\n\n// 获取枚举的原始值\nMethodInt.Sub.rawValue\nMethod.Mul.hashValue\nMethodStr.Add.rawValue\n\n\n// 枚举关联值\n// 用元祖方式每个枚举可以设置多个关联值\nenum LineSegment {\n  case StartAndEnd(start: Double, end:Double)\n  case StartAndPattern(start: Double, pattern: Double)\n}\nvar lsd = LineSegment.StartAndEnd(start: 10, end: 20)\nswitch lsd {\ncase .StartAndEnd(let s, let e):\n  println(&quot;\\(s) -&gt; \\(e)&quot;)\ncase .StartAndPattern(let s, let len):\n  println(&quot;\\(s) -&gt; \\(len)&quot;)\n}\n// -&gt; &quot;10.0 -&gt; 20.0&quot;\n</code></pre>"},{"title":"swift 类","date":"2015-09-09T06:33:40.000Z","_content":"  \n    /**\n     类\n     */\n\n    // 定义一个类,与结构体非常相似,只是类没有逐一成员构造器\n    struct Rect {\n      var width: Double = 0.0\n      var height: Double = 0.0\n      \n      // 类的方法\n      func getWidth() -> Double{\n        return width\n      }\n      \n      func show(){\n        println(\"width=\\(width), height=\\(height)\")\n      }\n    }\n\n    // 实例化一个类\n    var rect: Rect = Rect()\n\n    // 访问实例类的变量\n    rect.width\n\n    var rect1: Rect = Rect()\n    rect1.width = 100\n    rect1.height = 200\n\n    var rect2: Rect = Rect()\n    rect2.height\n\n    // 调用类的方法\n    rect2.getWidth()\n    rect2.show()\n\n    // 类整体赋值\n    // rect3与rect2指向同一块内存引用,当其中一个改变一个后,另外一个会改变\n    var rect3 = rect2\n\n    rect2.width = 400\n\n    // === !== 恒等运算符,只能用于类的实例判断,判断两个类的实例是否相等\n    if rect3 === rect2 {\n      println(\"equal\")\n    } else {\n      println(\"not equal\")\n    }","source":"_posts/swift-类.md","raw":"title: \"swift 类\"\ndate: 2015-09-09 14:33:40\ntags: 类\ncategories: swift\n---\n  \n    /**\n     类\n     */\n\n    // 定义一个类,与结构体非常相似,只是类没有逐一成员构造器\n    struct Rect {\n      var width: Double = 0.0\n      var height: Double = 0.0\n      \n      // 类的方法\n      func getWidth() -> Double{\n        return width\n      }\n      \n      func show(){\n        println(\"width=\\(width), height=\\(height)\")\n      }\n    }\n\n    // 实例化一个类\n    var rect: Rect = Rect()\n\n    // 访问实例类的变量\n    rect.width\n\n    var rect1: Rect = Rect()\n    rect1.width = 100\n    rect1.height = 200\n\n    var rect2: Rect = Rect()\n    rect2.height\n\n    // 调用类的方法\n    rect2.getWidth()\n    rect2.show()\n\n    // 类整体赋值\n    // rect3与rect2指向同一块内存引用,当其中一个改变一个后,另外一个会改变\n    var rect3 = rect2\n\n    rect2.width = 400\n\n    // === !== 恒等运算符,只能用于类的实例判断,判断两个类的实例是否相等\n    if rect3 === rect2 {\n      println(\"equal\")\n    } else {\n      println(\"not equal\")\n    }","slug":"swift-类","published":1,"updated":"2016-08-14T07:09:45.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5uj001c18twgsyvsyew","content":"<pre><code>/**\n 类\n */\n\n// 定义一个类,与结构体非常相似,只是类没有逐一成员构造器\nstruct Rect {\n  var width: Double = 0.0\n  var height: Double = 0.0\n\n  // 类的方法\n  func getWidth() -&gt; Double{\n    return width\n  }\n\n  func show(){\n    println(&quot;width=\\(width), height=\\(height)&quot;)\n  }\n}\n\n// 实例化一个类\nvar rect: Rect = Rect()\n\n// 访问实例类的变量\nrect.width\n\nvar rect1: Rect = Rect()\nrect1.width = 100\nrect1.height = 200\n\nvar rect2: Rect = Rect()\nrect2.height\n\n// 调用类的方法\nrect2.getWidth()\nrect2.show()\n\n// 类整体赋值\n// rect3与rect2指向同一块内存引用,当其中一个改变一个后,另外一个会改变\nvar rect3 = rect2\n\nrect2.width = 400\n\n// === !== 恒等运算符,只能用于类的实例判断,判断两个类的实例是否相等\nif rect3 === rect2 {\n  println(&quot;equal&quot;)\n} else {\n  println(&quot;not equal&quot;)\n}\n</code></pre>","excerpt":"","more":"<pre><code>/**\n 类\n */\n\n// 定义一个类,与结构体非常相似,只是类没有逐一成员构造器\nstruct Rect {\n  var width: Double = 0.0\n  var height: Double = 0.0\n\n  // 类的方法\n  func getWidth() -&gt; Double{\n    return width\n  }\n\n  func show(){\n    println(&quot;width=\\(width), height=\\(height)&quot;)\n  }\n}\n\n// 实例化一个类\nvar rect: Rect = Rect()\n\n// 访问实例类的变量\nrect.width\n\nvar rect1: Rect = Rect()\nrect1.width = 100\nrect1.height = 200\n\nvar rect2: Rect = Rect()\nrect2.height\n\n// 调用类的方法\nrect2.getWidth()\nrect2.show()\n\n// 类整体赋值\n// rect3与rect2指向同一块内存引用,当其中一个改变一个后,另外一个会改变\nvar rect3 = rect2\n\nrect2.width = 400\n\n// === !== 恒等运算符,只能用于类的实例判断,判断两个类的实例是否相等\nif rect3 === rect2 {\n  println(&quot;equal&quot;)\n} else {\n  println(&quot;not equal&quot;)\n}\n</code></pre>"},{"title":"swift 模糊效果","date":"2015-09-21T08:10:10.000Z","_content":"  \n    // 创建一个背景图片在视图上\n    let imgView = UIImageView(image: UIImage(named: \"test.png\"))\n    imgView.frame = CGRectMake(0, 0, view.frame.width, view.frame.height)\n    self.view.addSubview(imgView)\n    \n    // 创建模糊效果实例, 除了light, 还有其它各种模糊效果\n    let blurEffect = UIBlurEffect(style: .Light)\n    \n    // 创建模糊视图实例\n    let blurView = UIVisualEffectView(effect: blurEffect)\n    \n    // 模糊实例位置\n    blurView.frame.size = CGSize(width: view.frame.width, height: view.frame.height)\n    \n    self.view.addSubview(blurView)","source":"_posts/swift-模糊效果.md","raw":"title: \"swift 模糊效果\"\ndate: 2015-09-21 16:10:10\ntags: 模糊效果\ncategories: swift\n---\n  \n    // 创建一个背景图片在视图上\n    let imgView = UIImageView(image: UIImage(named: \"test.png\"))\n    imgView.frame = CGRectMake(0, 0, view.frame.width, view.frame.height)\n    self.view.addSubview(imgView)\n    \n    // 创建模糊效果实例, 除了light, 还有其它各种模糊效果\n    let blurEffect = UIBlurEffect(style: .Light)\n    \n    // 创建模糊视图实例\n    let blurView = UIVisualEffectView(effect: blurEffect)\n    \n    // 模糊实例位置\n    blurView.frame.size = CGSize(width: view.frame.width, height: view.frame.height)\n    \n    self.view.addSubview(blurView)","slug":"swift-模糊效果","published":1,"updated":"2016-08-14T07:09:45.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5ul001f18twysj2t029","content":"<pre><code>// 创建一个背景图片在视图上\nlet imgView = UIImageView(image: UIImage(named: &quot;test.png&quot;))\nimgView.frame = CGRectMake(0, 0, view.frame.width, view.frame.height)\nself.view.addSubview(imgView)\n\n// 创建模糊效果实例, 除了light, 还有其它各种模糊效果\nlet blurEffect = UIBlurEffect(style: .Light)\n\n// 创建模糊视图实例\nlet blurView = UIVisualEffectView(effect: blurEffect)\n\n// 模糊实例位置\nblurView.frame.size = CGSize(width: view.frame.width, height: view.frame.height)\n\nself.view.addSubview(blurView)\n</code></pre>","excerpt":"","more":"<pre><code>// 创建一个背景图片在视图上\nlet imgView = UIImageView(image: UIImage(named: &quot;test.png&quot;))\nimgView.frame = CGRectMake(0, 0, view.frame.width, view.frame.height)\nself.view.addSubview(imgView)\n\n// 创建模糊效果实例, 除了light, 还有其它各种模糊效果\nlet blurEffect = UIBlurEffect(style: .Light)\n\n// 创建模糊视图实例\nlet blurView = UIVisualEffectView(effect: blurEffect)\n\n// 模糊实例位置\nblurView.frame.size = CGSize(width: view.frame.width, height: view.frame.height)\n\nself.view.addSubview(blurView)\n</code></pre>"},{"title":"swift 结构体","date":"2015-09-08T06:59:52.000Z","_content":"  \n    /**\n     结构体\n     */\n\n    // 定义一个结构体\n    struct Rect {\n      var width: Double = 0.0\n      var height: Double = 0.0\n      \n      // 结构体的方法\n      func getWidth() -> Double{\n        return width\n      }\n      \n      func show(){\n        println(\"width=\\(width), height=\\(height)\")\n      }\n    }\n\n    // 实例化一个结构体\n    var rect: Rect = Rect()\n\n    // 访问实例结构体的变量\n    rect.width\n\n    var rect1: Rect = Rect()\n    rect1.width = 100\n    rect1.height = 200\n\n    // 结构体逐一成员构造器\n    var rect2: Rect = Rect(width: 300, height: 23)\n    rect2.height\n\n    // 调用结构体的方法\n    rect2.getWidth()\n    rect2.show()\n\n    // 结构体整体赋值\n    // rect3与rect2指向同一块内存,但rect3与rect2是两个不同的实例,只是内容一致\n    var rect3 = rect2\n\n    rect2.width = 400","source":"_posts/swift-结构体.md","raw":"title: \"swift 结构体\"\ndate: 2015-09-08 14:59:52\ntags: 结构体\ncategories: swift\n---\n  \n    /**\n     结构体\n     */\n\n    // 定义一个结构体\n    struct Rect {\n      var width: Double = 0.0\n      var height: Double = 0.0\n      \n      // 结构体的方法\n      func getWidth() -> Double{\n        return width\n      }\n      \n      func show(){\n        println(\"width=\\(width), height=\\(height)\")\n      }\n    }\n\n    // 实例化一个结构体\n    var rect: Rect = Rect()\n\n    // 访问实例结构体的变量\n    rect.width\n\n    var rect1: Rect = Rect()\n    rect1.width = 100\n    rect1.height = 200\n\n    // 结构体逐一成员构造器\n    var rect2: Rect = Rect(width: 300, height: 23)\n    rect2.height\n\n    // 调用结构体的方法\n    rect2.getWidth()\n    rect2.show()\n\n    // 结构体整体赋值\n    // rect3与rect2指向同一块内存,但rect3与rect2是两个不同的实例,只是内容一致\n    var rect3 = rect2\n\n    rect2.width = 400","slug":"swift-结构体","published":1,"updated":"2016-08-14T07:09:45.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5un001i18twhmsc2y7o","content":"<pre><code>/**\n 结构体\n */\n\n// 定义一个结构体\nstruct Rect {\n  var width: Double = 0.0\n  var height: Double = 0.0\n\n  // 结构体的方法\n  func getWidth() -&gt; Double{\n    return width\n  }\n\n  func show(){\n    println(&quot;width=\\(width), height=\\(height)&quot;)\n  }\n}\n\n// 实例化一个结构体\nvar rect: Rect = Rect()\n\n// 访问实例结构体的变量\nrect.width\n\nvar rect1: Rect = Rect()\nrect1.width = 100\nrect1.height = 200\n\n// 结构体逐一成员构造器\nvar rect2: Rect = Rect(width: 300, height: 23)\nrect2.height\n\n// 调用结构体的方法\nrect2.getWidth()\nrect2.show()\n\n// 结构体整体赋值\n// rect3与rect2指向同一块内存,但rect3与rect2是两个不同的实例,只是内容一致\nvar rect3 = rect2\n\nrect2.width = 400\n</code></pre>","excerpt":"","more":"<pre><code>/**\n 结构体\n */\n\n// 定义一个结构体\nstruct Rect {\n  var width: Double = 0.0\n  var height: Double = 0.0\n\n  // 结构体的方法\n  func getWidth() -&gt; Double{\n    return width\n  }\n\n  func show(){\n    println(&quot;width=\\(width), height=\\(height)&quot;)\n  }\n}\n\n// 实例化一个结构体\nvar rect: Rect = Rect()\n\n// 访问实例结构体的变量\nrect.width\n\nvar rect1: Rect = Rect()\nrect1.width = 100\nrect1.height = 200\n\n// 结构体逐一成员构造器\nvar rect2: Rect = Rect(width: 300, height: 23)\nrect2.height\n\n// 调用结构体的方法\nrect2.getWidth()\nrect2.show()\n\n// 结构体整体赋值\n// rect3与rect2指向同一块内存,但rect3与rect2是两个不同的实例,只是内容一致\nvar rect3 = rect2\n\nrect2.width = 400\n</code></pre>"},{"title":"可选值,可选类型","date":"2015-09-01T05:25:27.000Z","_content":"\n    var optValue1: Int?       // 没有值 optValue1为nil\n    var optValue2: Int? = 9   // 有值\n\n    // 对一个可选值的强制解析(注意末尾的感叹号), 如果optValue1没有值,会导致一个运行错误\n    //var sValue: Int = optValue1!\n    //println(sValue)\n\n    // 可选绑定\n    if var sValue = optValue1 {\n      println(sValue)\n    }\n\n    // 隐式解析可选类型,两张状态:有值,没有值(nil)\n    var impOptValue: Int! = 8\n    if impOptValue == 8 {\n      println(impOptValue)\n    }\n    \n    // 不需要强制解析(末尾可不加感叹号)\n    var iValue: Int = impOptValue","source":"_posts/可选值-可选类型.md","raw":"title: \"可选值,可选类型\"\ndate: 2015-09-01 13:25:27\ntags: 可选值\ncategories: swift\n---\n\n    var optValue1: Int?       // 没有值 optValue1为nil\n    var optValue2: Int? = 9   // 有值\n\n    // 对一个可选值的强制解析(注意末尾的感叹号), 如果optValue1没有值,会导致一个运行错误\n    //var sValue: Int = optValue1!\n    //println(sValue)\n\n    // 可选绑定\n    if var sValue = optValue1 {\n      println(sValue)\n    }\n\n    // 隐式解析可选类型,两张状态:有值,没有值(nil)\n    var impOptValue: Int! = 8\n    if impOptValue == 8 {\n      println(impOptValue)\n    }\n    \n    // 不需要强制解析(末尾可不加感叹号)\n    var iValue: Int = impOptValue","slug":"可选值-可选类型","published":1,"updated":"2016-08-14T07:09:45.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5uo001l18twhlx9o90s","content":"<pre><code>var optValue1: Int?       // 没有值 optValue1为nil\nvar optValue2: Int? = 9   // 有值\n\n// 对一个可选值的强制解析(注意末尾的感叹号), 如果optValue1没有值,会导致一个运行错误\n//var sValue: Int = optValue1!\n//println(sValue)\n\n// 可选绑定\nif var sValue = optValue1 {\n  println(sValue)\n}\n\n// 隐式解析可选类型,两张状态:有值,没有值(nil)\nvar impOptValue: Int! = 8\nif impOptValue == 8 {\n  println(impOptValue)\n}\n\n// 不需要强制解析(末尾可不加感叹号)\nvar iValue: Int = impOptValue\n</code></pre>","excerpt":"","more":"<pre><code>var optValue1: Int?       // 没有值 optValue1为nil\nvar optValue2: Int? = 9   // 有值\n\n// 对一个可选值的强制解析(注意末尾的感叹号), 如果optValue1没有值,会导致一个运行错误\n//var sValue: Int = optValue1!\n//println(sValue)\n\n// 可选绑定\nif var sValue = optValue1 {\n  println(sValue)\n}\n\n// 隐式解析可选类型,两张状态:有值,没有值(nil)\nvar impOptValue: Int! = 8\nif impOptValue == 8 {\n  println(impOptValue)\n}\n\n// 不需要强制解析(末尾可不加感叹号)\nvar iValue: Int = impOptValue\n</code></pre>"},{"title":"新的开始","date":"2015-04-08T12:14:06.000Z","_content":"\n利用github新搭的blog,以后就用这个了~~\n","source":"_posts/新的开始.md","raw":"title: \"新的开始\"\ndate: 2015-04-08 20:14:06\ncategories: 日志\n---\n\n利用github新搭的blog,以后就用这个了~~\n","slug":"新的开始","published":1,"updated":"2016-08-14T07:09:45.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciruct5uq001n18twas16cx7v","content":"<p>利用github新搭的blog,以后就用这个了~~</p>\n","excerpt":"","more":"<p>利用github新搭的blog,以后就用这个了~~</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciruct5sx000018twygqjr8ik","category_id":"ciruct5tb000418twbgvgo0h0","_id":"ciruct5tm000c18tw3j3q4i1j"},{"post_id":"ciruct5tk000b18tw44m2zeb3","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5ts000h18tw4y6bu1m2"},{"post_id":"ciruct5t4000218twbdvzgbxm","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5tw000l18twi9rsk80r"},{"post_id":"ciruct5to000g18tww13qxhoi","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5ty000n18twokm4luux"},{"post_id":"ciruct5tb000518tw1l29m5sq","category_id":"ciruct5tb000418twbgvgo0h0","_id":"ciruct5u1000r18tw80ccze8s"},{"post_id":"ciruct5tt000i18twty5ewu80","category_id":"ciruct5tb000418twbgvgo0h0","_id":"ciruct5u4000u18twrbae7c64"},{"post_id":"ciruct5tf000618tw869jpfk6","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5u6000w18tw7glmps7j"},{"post_id":"ciruct5ty000o18twqkvsiwq6","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5ua001018twk3go81ra"},{"post_id":"ciruct5u1000s18twwp1m4vcw","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5uc001218tw6dgyq4kg"},{"post_id":"ciruct5tg000818twhewofc7l","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5uf001518tw4evrsym5"},{"post_id":"ciruct5u4000v18twz314gy3k","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5ui001818twobjov3as"},{"post_id":"ciruct5u7000x18twdbidhowd","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5ui001b18twtqc8wsot"},{"post_id":"ciruct5ua001118tw0s3n2eue","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5ul001e18tw070ffjj8"},{"post_id":"ciruct5uc001318tw7ouizzfy","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5um001h18twtqkelja4"},{"post_id":"ciruct5uf001618twn5543s4v","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5uo001k18twqotth3bg"},{"post_id":"ciruct5ui001918tw1msg5l0n","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5up001m18tw5thq69rm"},{"post_id":"ciruct5uj001c18twgsyvsyew","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5us001q18twr0cbfq33"},{"post_id":"ciruct5ul001f18twysj2t029","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5ut001s18tw01qwjg14"},{"post_id":"ciruct5un001i18twhmsc2y7o","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5uv001u18twrohvkhy1"},{"post_id":"ciruct5uo001l18twhlx9o90s","category_id":"ciruct5tg000918twlefve6jr","_id":"ciruct5uv001w18twcr5n6fgn"},{"post_id":"ciruct5uq001n18twas16cx7v","category_id":"ciruct5ut001r18twwisjlsyb","_id":"ciruct5uv001z18twrsk76yjh"}],"PostTag":[{"post_id":"ciruct5sx000018twygqjr8ik","tag_id":"ciruct5t7000318twpcnp18dg","_id":"ciruct5tj000a18twtwm7hvfa"},{"post_id":"ciruct5tb000518tw1l29m5sq","tag_id":"ciruct5t7000318twpcnp18dg","_id":"ciruct5to000f18twtwxvvo03"},{"post_id":"ciruct5to000g18tww13qxhoi","tag_id":"ciruct5tv000k18twwicfsktc","_id":"ciruct5u4000t18twj4wpqkdl"},{"post_id":"ciruct5tt000i18twty5ewu80","tag_id":"ciruct5u1000q18twhm936ofb","_id":"ciruct5u9000z18twur63omi8"},{"post_id":"ciruct5ty000o18twqkvsiwq6","tag_id":"ciruct5u7000y18twhl4q3ch1","_id":"ciruct5ug001718twujsypqx5"},{"post_id":"ciruct5u1000s18twwp1m4vcw","tag_id":"ciruct5uf001418tw9xee2oyt","_id":"ciruct5ul001d18twdqtrnipz"},{"post_id":"ciruct5u4000v18twz314gy3k","tag_id":"ciruct5ui001a18tw4br0q8hl","_id":"ciruct5uo001j18twwv58yx5g"},{"post_id":"ciruct5u7000x18twdbidhowd","tag_id":"ciruct5um001g18twlunwtcdd","_id":"ciruct5us001p18twz53ew3dy"},{"post_id":"ciruct5ua001118tw0s3n2eue","tag_id":"ciruct5us001o18twd4cxiro6","_id":"ciruct5uv001v18twobybnul3"},{"post_id":"ciruct5uc001318tw7ouizzfy","tag_id":"ciruct5uu001t18tw86v48464","_id":"ciruct5uv001y18twbx1v4w4p"},{"post_id":"ciruct5uf001618twn5543s4v","tag_id":"ciruct5uv001x18twf1ilgf5o","_id":"ciruct5ux002118twx1dhxts1"},{"post_id":"ciruct5ui001918tw1msg5l0n","tag_id":"ciruct5ux002018twxdc7vs39","_id":"ciruct5ux002318twpyabzi1u"},{"post_id":"ciruct5uj001c18twgsyvsyew","tag_id":"ciruct5ux002218twsf18amvv","_id":"ciruct5ux002518twaqwz75wb"},{"post_id":"ciruct5ul001f18twysj2t029","tag_id":"ciruct5ux002418twn82h8ihz","_id":"ciruct5uz002718twigsugqfc"},{"post_id":"ciruct5un001i18twhmsc2y7o","tag_id":"ciruct5uz002618tw14mf1cu0","_id":"ciruct5uz002918twuwotfk7l"},{"post_id":"ciruct5uo001l18twhlx9o90s","tag_id":"ciruct5us001o18twd4cxiro6","_id":"ciruct5uz002a18tw3khr23p1"}],"Tag":[{"name":"backbone","_id":"ciruct5t7000318twpcnp18dg"},{"name":"swift, break, continue","_id":"ciruct5tv000k18twwicfsktc"},{"name":"eslint","_id":"ciruct5u1000q18twhm936ofb"},{"name":"swift Array","_id":"ciruct5u7000y18twhl4q3ch1"},{"name":"swift,字典","_id":"ciruct5uf001418tw9xee2oyt"},{"name":"元祖类型","_id":"ciruct5ui001a18tw4br0q8hl"},{"name":"UILabel","_id":"ciruct5um001g18twlunwtcdd"},{"name":"可选值","_id":"ciruct5us001o18twd4cxiro6"},{"name":"二维数组","_id":"ciruct5uu001t18tw86v48464"},{"name":"动画","_id":"ciruct5uv001x18twf1ilgf5o"},{"name":"枚举, enum","_id":"ciruct5ux002018twxdc7vs39"},{"name":"类","_id":"ciruct5ux002218twsf18amvv"},{"name":"模糊效果","_id":"ciruct5ux002418twn82h8ihz"},{"name":"结构体","_id":"ciruct5uz002618tw14mf1cu0"}]}}